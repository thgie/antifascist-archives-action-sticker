%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: archive-boxes-stack.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Zern
%%CreationDate: 6/4/2012
%%BoundingBox: 0 0 570 670
%%HiResBoundingBox: 0 0 569.4893 669.9190
%%CropBox: 0 0 569.4893 669.9190
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2012-06-04T23:31:40+08:00</xmp:CreateDate>
         <xmp:ModifyDate>2012-06-04T23:31:40+08:00</xmp:ModifyDate>
         <xmp:MetadataDate>2012-06-04T23:31:40+08:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>220</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADcAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUn1fzn5Q0bl+l9c0/TyteQurqGEihp0dl77YqwvVv+ck/yV0zksvmWK4kHRLSKe5rv2aKN&#xA;k/4bFWGan/zmf+W8L+lpml6rqMpNFPpwwoxJoAC0jP8A8JiqUv8A85Q/mdq9B5Z/LW5KNTjcXBuJ&#xA;4zWtCSkMCr/weQOSI6shEnohn85f85fa4Abew07y/G9CJFS322/kuJLtx9K5A6iA6shikh3/AC1/&#xA;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&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:81FF960D56AEE111B819D8153EEFF0A0</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:81FF960D56AEE111B819D8153EEFF0A0</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:495d734b-595f-ed44-baa4-f7b96906a5ee</stRef:instanceID>
            <stRef:documentID>xmp.did:F87F11740720681186239FE77607E6FE</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:81FF960D56AEE111B819D8153EEFF0A0</stEvt:instanceID>
                  <stEvt:when>2012-06-04T23:31:40+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>232.821792</stDim:w>
            <stDim:h>262.453748</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Web Color Group</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=63 G=169 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>63</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=29 B=37</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -669.919 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 669.919 li
569.489 669.919 li
569.489 0 li
cp
clp
[1 0 0 1 0 0 ]ct
406.752 565.297 mo
186.776 438.295 li
186.776 274.511 li
176.927 268.826 li
176.927 236.711 li
406.753 369.401 li
406.752 565.297 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.760784 .643137 .501961 rgb
f
556.597 478.787 mo
406.752 565.297 li
406.753 369.401 li
565.489 277.754 li
565.489 309.868 li
556.597 315.002 li
556.597 478.787 li
cp
.803922 .713726 .588235 rgb
f
406.753 369.401 mo
176.927 236.711 li
335.665 145.064 li
565.489 277.754 li
406.753 369.401 li
cp
.917647 .827451 .694118 rgb
f
561.489 307.558 mo
454.288 369.451 li
410.752 394.587 li
410.753 371.71 li
561.489 284.683 li
561.489 307.558 li
cp
552.597 476.479 mo
410.752 558.371 li
410.752 403.824 li
552.597 321.93 li
552.597 476.479 li
cp
190.776 281.44 mo
313.362 352.215 li
402.752 403.824 li
402.752 558.369 li
190.776 435.985 li
190.776 281.44 li
cp
180.927 243.64 mo
402.752 371.71 li
402.752 394.587 li
188.776 271.047 li
188.774 271.046 188.772 271.046 188.771 271.045 cv
180.927 266.516 li
180.927 243.64 li
cp
335.665 149.683 mo
557.491 277.753 li
538.439 288.753 li
538.354 288.36 538.226 287.971 538.014 287.604 cv
536.911 285.69 534.464 285.035 532.55 286.14 cv
504.753 302.188 li
502.84 303.293 502.185 305.739 503.289 307.652 cv
503.5 308.018 503.764 308.332 504.06 308.602 cv
457.687 335.375 li
457.601 334.982 457.473 334.592 457.261 334.225 cv
456.156 332.311 453.71 331.657 451.797 332.761 cv
424.002 348.81 li
422.089 349.914 421.434 352.36 422.538 354.273 cv
422.749 354.639 423.014 354.953 423.31 355.224 cv
406.752 364.782 li
184.926 236.711 li
203.132 226.2 li
203.177 226.78 203.333 227.36 203.644 227.897 cv
204.385 229.181 205.729 229.898 207.112 229.898 cv
207.79 229.898 208.478 229.725 209.108 229.361 cv
236.905 213.312 li
238.817 212.207 239.474 209.761 238.368 207.848 cv
238.059 207.311 237.636 206.885 237.155 206.557 cv
283.884 179.579 li
283.927 180.159 284.084 180.739 284.395 181.277 cv
285.136 182.56 286.479 183.277 287.862 183.277 cv
288.541 183.277 289.229 183.104 289.858 182.741 cv
317.659 166.693 li
319.571 165.589 320.228 163.143 319.123 161.229 cv
318.812 160.69 318.388 160.264 317.905 159.936 cv
335.665 149.683 li
cp
569.479 277.604 mo
569.477 277.522 569.471 277.44 569.463 277.358 cv
569.444 277.175 569.415 276.994 569.372 276.816 cv
569.359 276.762 569.347 276.709 569.332 276.655 cv
569.277 276.466 569.207 276.283 569.126 276.104 cv
569.094 276.033 569.059 275.964 569.022 275.895 cv
568.941 275.74 568.85 275.591 568.749 275.448 cv
568.714 275.398 568.682 275.347 568.644 275.299 cv
568.518 275.136 568.375 274.986 568.224 274.844 cv
568.17 274.793 568.114 274.745 568.057 274.697 cv
567.893 274.559 567.719 274.43 567.531 274.318 cv
567.517 274.31 567.506 274.299 567.492 274.291 cv
337.665 141.6 li
336.427 140.885 334.901 140.885 333.665 141.6 cv
174.927 233.247 li
174.923 233.249 174.921 233.252 174.917 233.254 cv
174.712 233.373 174.524 233.514 174.347 233.665 cv
174.299 233.705 174.253 233.745 174.207 233.788 cv
174.04 233.943 173.882 234.107 173.745 234.287 cv
173.729 234.308 173.718 234.33 173.702 234.351 cv
173.581 234.517 173.476 234.693 173.381 234.876 cv
173.353 234.93 173.326 234.982 173.302 235.037 cv
173.206 235.243 173.122 235.454 173.063 235.674 cv
173.062 235.679 173.062 235.684 173.061 235.689 cv
173.005 235.901 172.972 236.121 172.95 236.343 cv
172.944 236.406 172.94 236.469 172.938 236.532 cv
172.936 236.592 172.927 236.651 172.927 236.711 cv
172.927 268.826 li
172.927 270.255 173.688 271.575 174.927 272.29 cv
182.776 276.821 li
182.776 438.295 li
182.776 439.724 183.538 441.045 184.776 441.759 cv
404.72 568.742 li
404.731 568.748 404.741 568.756 404.752 568.764 cv
405.371 569.121 406.062 569.299 406.752 569.299 cv
407.442 569.299 408.133 569.121 408.752 568.764 cv
558.597 482.252 li
559.834 481.537 560.597 480.217 560.597 478.787 cv
560.597 317.311 li
567.489 313.332 li
568.727 312.617 569.489 311.297 569.489 309.868 cv
569.489 277.754 li
569.489 277.704 569.481 277.655 569.479 277.604 cv
cp
0 0 0 rgb
f
512.257 360.711 mo
511.939 360.488 511.521 360.469 511.184 360.664 cv
457.269 391.792 li
456.864 392.025 456.676 392.507 456.813 392.952 cv
462.164 410.331 li
462.254 410.622 462.472 410.856 462.755 410.968 cv
462.872 411.015 462.996 411.037 463.12 411.037 cv
463.294 411.037 463.466 410.992 463.62 410.903 cv
508.17 385.184 li
508.426 385.035 508.604 384.782 508.654 384.491 cv
512.668 361.704 li
512.736 361.321 512.575 360.934 512.257 360.711 cv
cp
f
221.604 345.844 mo
219.704 332.678 li
219.161 328.938 218.552 323.758 218.009 319.785 cv
217.806 319.668 li
217.33 323.053 216.651 327.645 216.108 330.602 cv
214.073 341.496 li
221.604 345.844 li
cp
213.259 347.488 mo
210.816 359.782 li
203.759 355.708 li
213.937 309.103 li
222.419 314 li
231.851 371.927 li
224.794 367.853 li
222.351 352.738 li
213.259 347.488 li
cp
.6 .505882 .396078 rgb
f
243.726 350.596 mo
245.626 351.692 li
249.968 354.199 252.683 351.874 252.683 346.501 cv
252.683 341.361 250.919 336.84 246.169 334.019 cv
245.286 333.51 244.337 333.039 243.726 332.92 cv
243.726 350.596 li
cp
236.533 322.927 mo
239.044 323.676 242.233 325.206 245.286 326.969 cv
249.968 329.672 253.904 332.879 256.618 337.326 cv
259.13 341.58 260.079 345.632 260.079 349.992 cv
260.079 356.066 257.501 359.327 252.886 359.076 cv
252.886 359.232 li
256.075 362.397 257.772 366.881 258.653 373.619 cv
259.673 380.592 260.757 386.825 261.504 389.047 cv
253.972 384.698 li
253.361 382.866 252.411 377.179 251.597 370.558 cv
250.715 363.273 249.019 360.036 245.423 357.96 cv
243.726 356.98 li
243.726 378.783 li
236.533 374.63 li
236.533 322.927 li
cp
f
286.949 402.882 mo
285.593 402.877 283.218 402.051 280.231 400.327 cv
269.782 394.294 263.812 381.035 263.812 364.84 cv
263.812 344.672 273.107 342.798 281.25 347.499 cv
284.235 349.223 286.271 351.099 287.221 352.27 cv
285.864 358.494 li
284.778 357.322 283.692 356.229 281.521 354.975 cv
276.568 352.115 271.479 354.394 271.479 368.721 cv
271.479 382.814 276.093 390.54 281.589 393.713 cv
283.286 394.693 284.982 395.283 286.067 395.364 cv
286.949 402.882 li
cp
f
298.62 357.995 mo
298.62 379.72 li
309.478 385.987 li
309.478 364.263 li
316.737 368.455 li
316.737 420.937 li
309.478 416.744 li
309.478 393.618 li
298.62 387.351 li
298.62 410.477 li
291.36 406.284 li
291.36 353.803 li
298.62 357.995 li
cp
f
331.325 376.877 mo
331.325 429.358 li
324.065 425.167 li
324.065 372.686 li
331.325 376.877 li
cp
f
345.575 437.586 mo
335.261 379.149 li
343.2 383.732 li
346.999 409.441 li
347.882 415.713 349.035 423.31 349.714 430.086 cv
349.917 430.203 li
350.528 424.094 351.546 417.984 352.429 412.42 cv
356.161 391.216 li
364.032 395.76 li
353.446 442.13 li
345.575 437.586 li
cp
f
385.88 436.951 mo
375.023 430.683 li
375.023 447.346 li
387.374 454.477 li
387.374 461.717 li
367.763 450.396 li
367.763 397.914 li
386.56 408.767 li
386.56 416.008 li
375.023 409.348 li
375.023 423.753 li
385.88 430.021 li
385.88 436.951 li
cp
f
423.687 472.414 mo
423.515 472.414 423.346 472.324 423.254 472.164 cv
423.115 471.924 423.197 471.619 423.437 471.48 cv
539.631 404.397 li
539.87 404.26 540.177 404.342 540.313 404.58 cv
540.452 404.819 540.37 405.125 540.131 405.263 cv
423.937 472.346 li
423.857 472.393 423.771 472.414 423.687 472.414 cv
cp
.54902 .490196 .403922 rgb
f
423.687 487.914 mo
423.515 487.914 423.346 487.824 423.254 487.664 cv
423.115 487.424 423.197 487.119 423.437 486.98 cv
539.631 419.897 li
539.87 419.76 540.177 419.841 540.313 420.08 cv
540.452 420.319 540.37 420.625 540.131 420.763 cv
423.937 487.846 li
423.857 487.893 423.771 487.914 423.687 487.914 cv
cp
f
423.687 503.414 mo
423.515 503.414 423.346 503.324 423.254 503.164 cv
423.115 502.924 423.197 502.619 423.437 502.48 cv
539.631 435.397 li
539.87 435.26 540.177 435.341 540.313 435.58 cv
540.452 435.819 540.37 436.125 540.131 436.263 cv
423.937 503.346 li
423.857 503.393 423.771 503.414 423.687 503.414 cv
cp
f
423.687 518.914 mo
423.515 518.914 423.346 518.824 423.254 518.664 cv
423.115 518.424 423.197 518.119 423.437 517.98 cv
539.631 450.897 li
539.87 450.761 540.177 450.841 540.313 451.081 cv
540.452 451.319 540.37 451.626 540.131 451.763 cv
423.937 518.846 li
423.857 518.893 423.771 518.914 423.687 518.914 cv
cp
f
423.687 534.414 mo
423.515 534.414 423.346 534.324 423.254 534.164 cv
423.115 533.924 423.197 533.619 423.437 533.48 cv
539.631 466.396 li
539.87 466.26 540.177 466.34 540.313 466.58 cv
540.452 466.818 540.37 467.125 540.131 467.262 cv
423.937 534.346 li
423.857 534.393 423.771 534.414 423.687 534.414 cv
cp
f
388.242 487.914 mo
388.157 487.914 388.071 487.893 387.992 487.846 cv
290.312 431.449 li
290.073 431.312 289.991 431.006 290.129 430.767 cv
290.268 430.527 290.572 430.443 290.812 430.584 cv
388.492 486.98 li
388.731 487.119 388.813 487.424 388.675 487.664 cv
388.583 487.824 388.414 487.914 388.242 487.914 cv
cp
.6 .505882 .396078 rgb
f
388.242 503.414 mo
388.157 503.414 388.071 503.393 387.992 503.346 cv
290.312 446.949 li
290.073 446.813 289.991 446.506 290.129 446.268 cv
290.268 446.027 290.572 445.943 290.812 446.084 cv
388.492 502.48 li
388.731 502.619 388.813 502.924 388.675 503.164 cv
388.583 503.324 388.414 503.414 388.242 503.414 cv
cp
f
388.242 518.914 mo
388.157 518.914 388.071 518.893 387.992 518.846 cv
290.312 462.449 li
290.073 462.313 289.991 462.006 290.129 461.768 cv
290.268 461.527 290.572 461.443 290.812 461.584 cv
388.492 517.98 li
388.731 518.119 388.813 518.424 388.675 518.664 cv
388.583 518.824 388.414 518.914 388.242 518.914 cv
cp
f
388.242 534.414 mo
388.157 534.414 388.071 534.393 387.992 534.346 cv
290.312 477.949 li
290.073 477.813 289.991 477.506 290.129 477.268 cv
290.268 477.027 290.572 476.943 290.812 477.084 cv
388.492 533.48 li
388.731 533.619 388.813 533.924 388.675 534.164 cv
388.583 534.324 388.414 534.414 388.242 534.414 cv
cp
f
233.825 665.916 mo
13.8496 538.914 li
13.8496 375.131 li
4 369.445 li
4 337.33 li
233.826 470.021 li
233.825 665.916 li
cp
.760784 .643137 .501961 rgb
f
383.67 579.407 mo
233.825 665.916 li
233.826 470.021 li
392.563 378.373 li
392.563 410.486 li
383.67 415.621 li
383.67 579.407 li
cp
.803922 .713726 .588235 rgb
f
233.826 470.021 mo
4 337.33 li
162.738 245.683 li
392.563 378.373 li
233.826 470.021 li
cp
.917647 .827451 .694118 rgb
f
388.563 408.178 mo
281.361 470.07 li
237.825 495.206 li
237.826 472.329 li
388.563 385.302 li
388.563 408.178 li
cp
379.67 577.098 mo
237.825 658.991 li
237.825 504.443 li
379.67 422.549 li
379.67 577.098 li
cp
17.8496 382.059 mo
140.436 452.834 li
229.825 504.443 li
229.825 658.988 li
17.8496 536.604 li
17.8496 382.059 li
cp
8 344.259 mo
229.825 472.329 li
229.825 495.206 li
15.8496 371.666 li
15.8477 371.666 15.8457 371.665 15.8438 371.664 cv
8 367.135 li
8 344.259 li
cp
162.738 250.302 mo
384.564 378.373 li
365.513 389.372 li
365.427 388.979 365.299 388.59 365.087 388.223 cv
363.984 386.31 361.537 385.654 359.623 386.759 cv
331.826 402.808 li
329.913 403.912 329.258 406.358 330.362 408.271 cv
330.573 408.637 330.837 408.951 331.133 409.221 cv
284.76 435.995 li
284.674 435.601 284.546 435.212 284.334 434.844 cv
283.229 432.93 280.783 432.275 278.87 433.38 cv
251.075 449.429 li
249.162 450.533 248.507 452.979 249.611 454.893 cv
249.822 455.258 250.087 455.572 250.383 455.843 cv
233.825 465.401 li
11.999 337.33 li
30.2051 326.819 li
30.25 327.399 30.4063 327.979 30.7168 328.517 cv
31.458 329.8 32.8027 330.517 34.1855 330.517 cv
34.8633 330.517 35.5508 330.344 36.1816 329.98 cv
63.9785 313.931 li
65.8906 312.826 66.5469 310.38 65.4414 308.467 cv
65.1318 307.93 64.709 307.504 64.2285 307.176 cv
110.957 280.198 li
111 280.778 111.157 281.358 111.468 281.896 cv
112.209 283.179 113.553 283.896 114.936 283.896 cv
115.614 283.896 116.303 283.724 116.932 283.36 cv
144.732 267.313 li
146.645 266.208 147.301 263.762 146.196 261.848 cv
145.885 261.31 145.461 260.883 144.979 260.555 cv
162.738 250.302 li
cp
396.553 378.224 mo
396.55 378.141 396.544 378.06 396.536 377.978 cv
396.518 377.794 396.488 377.613 396.445 377.436 cv
396.433 377.381 396.42 377.328 396.405 377.274 cv
396.351 377.085 396.28 376.902 396.199 376.723 cv
396.167 376.652 396.132 376.583 396.096 376.514 cv
396.015 376.359 395.923 376.21 395.822 376.066 cv
395.787 376.018 395.755 375.966 395.717 375.918 cv
395.591 375.756 395.448 375.605 395.297 375.463 cv
395.243 375.412 395.188 375.364 395.13 375.316 cv
394.966 375.178 394.792 375.049 394.604 374.938 cv
394.59 374.93 394.579 374.918 394.565 374.91 cv
164.738 242.219 li
163.5 241.504 161.975 241.504 160.738 242.219 cv
2 333.866 li
1.99609 333.868 1.99414 333.871 1.99023 333.873 cv
1.78516 333.992 1.59766 334.133 1.41992 334.284 cv
1.37207 334.324 1.32617 334.364 1.28027 334.407 cv
1.11328 334.562 .955078 334.726 .818359 334.906 cv
.802734 334.927 .791016 334.949 .775391 334.97 cv
.654297 335.136 .548828 335.313 .454102 335.496 cv
.425781 335.549 .399414 335.602 .375 335.656 cv
.279297 335.862 .195313 336.073 .136719 336.293 cv
.134766 336.298 .134766 336.303 .133789 336.309 cv
.078125 336.521 .0449219 336.74 .0234375 336.962 cv
.0175781 337.025 .0136719 337.088 .0117188 337.151 cv
.00878906 337.211 0 337.27 0 337.33 cv
0 369.445 li
0 370.874 .761719 372.194 2 372.908 cv
9.84961 377.44 li
9.84961 538.914 li
9.84961 540.343 10.6113 541.664 11.8496 542.378 cv
231.793 669.361 li
231.805 669.368 231.814 669.376 231.825 669.383 cv
232.444 669.74 233.135 669.919 233.825 669.919 cv
234.516 669.919 235.206 669.74 235.825 669.383 cv
385.67 582.871 li
386.907 582.157 387.67 580.836 387.67 579.407 cv
387.67 417.93 li
394.563 413.951 li
395.8 413.236 396.563 411.916 396.563 410.486 cv
396.563 378.373 li
396.563 378.323 396.555 378.273 396.553 378.224 cv
cp
0 0 0 rgb
f
339.33 461.33 mo
339.013 461.107 338.594 461.088 338.257 461.283 cv
284.342 492.411 li
283.938 492.645 283.749 493.126 283.886 493.571 cv
289.237 510.95 li
289.327 511.241 289.545 511.476 289.828 511.587 cv
289.945 511.634 290.069 511.656 290.193 511.656 cv
290.367 511.656 290.539 511.611 290.693 511.522 cv
335.243 485.803 li
335.499 485.654 335.677 485.401 335.728 485.11 cv
339.741 462.323 li
339.81 461.94 339.648 461.553 339.33 461.33 cv
cp
f
48.6777 446.464 mo
46.7773 433.297 li
46.2344 429.558 45.625 424.377 45.082 420.404 cv
44.8789 420.287 li
44.4033 423.672 43.7246 428.264 43.1816 431.221 cv
41.1465 442.114 li
48.6777 446.464 li
cp
40.332 448.107 mo
37.8896 460.401 li
30.832 456.327 li
41.0098 409.722 li
49.4922 414.619 li
58.9238 472.546 li
51.8672 468.472 li
49.4238 453.357 li
40.332 448.107 li
cp
.6 .505882 .396078 rgb
f
70.7988 451.215 mo
72.6992 452.312 li
77.041 454.818 79.7559 452.493 79.7559 447.12 cv
79.7559 441.981 77.9922 437.458 73.2422 434.638 cv
72.3594 434.129 71.4102 433.658 70.7988 433.539 cv
70.7988 451.215 li
cp
63.6064 423.547 mo
66.1172 424.295 69.3066 425.825 72.3594 427.588 cv
77.041 430.291 80.9775 433.498 83.6914 437.946 cv
86.2031 442.198 87.1523 446.251 87.1523 450.611 cv
87.1523 456.686 84.5742 459.946 79.959 459.695 cv
79.959 459.852 li
83.1484 463.017 84.8457 467.5 85.7266 474.238 cv
86.7461 481.211 87.8301 487.444 88.5771 489.666 cv
81.0449 485.317 li
80.4346 483.485 79.4844 477.798 78.6699 471.177 cv
77.7881 463.893 76.0918 460.655 72.4961 458.579 cv
70.7988 457.6 li
70.7988 479.402 li
63.6064 475.249 li
63.6064 423.547 li
cp
f
114.022 503.501 mo
112.666 503.496 110.291 502.67 107.305 500.946 cv
96.8555 494.913 90.8848 481.654 90.8848 465.459 cv
90.8848 445.291 100.181 443.417 108.323 448.118 cv
111.309 449.842 113.344 451.718 114.294 452.889 cv
112.938 459.113 li
111.852 457.941 110.766 456.848 108.595 455.594 cv
103.642 452.734 98.5518 455.013 98.5518 469.34 cv
98.5518 483.434 103.166 491.159 108.662 494.332 cv
110.359 495.313 112.056 495.902 113.141 495.983 cv
114.022 503.501 li
cp
f
125.693 458.614 mo
125.693 480.339 li
136.551 486.606 li
136.551 464.882 li
143.811 469.074 li
143.811 521.556 li
136.551 517.363 li
136.551 494.237 li
125.693 487.97 li
125.693 511.096 li
118.434 506.903 li
118.434 454.422 li
125.693 458.614 li
cp
f
158.398 477.496 mo
158.398 529.978 li
151.139 525.786 li
151.139 473.305 li
158.398 477.496 li
cp
f
172.648 538.205 mo
162.334 479.769 li
170.273 484.352 li
174.072 510.061 li
174.955 516.332 176.108 523.929 176.787 530.705 cv
176.99 530.822 li
177.602 524.713 178.619 518.604 179.502 513.039 cv
183.234 491.835 li
191.105 496.379 li
180.52 542.749 li
172.648 538.205 li
cp
f
212.953 537.57 mo
202.097 531.302 li
202.097 547.965 li
214.447 555.096 li
214.447 562.337 li
194.836 551.015 li
194.836 498.533 li
213.633 509.386 li
213.633 516.627 li
202.097 509.967 li
202.097 524.372 li
212.953 530.641 li
212.953 537.57 li
cp
f
250.76 573.033 mo
250.588 573.033 250.419 572.943 250.327 572.783 cv
250.188 572.544 250.271 572.238 250.51 572.101 cv
366.704 505.017 li
366.943 504.879 367.25 504.961 367.387 505.199 cv
367.525 505.438 367.443 505.744 367.204 505.882 cv
251.01 572.966 li
250.931 573.012 250.845 573.033 250.76 573.033 cv
cp
.54902 .490196 .403922 rgb
f
250.76 588.533 mo
250.588 588.533 250.419 588.443 250.327 588.283 cv
250.188 588.044 250.271 587.738 250.51 587.601 cv
366.704 520.517 li
366.943 520.379 367.25 520.46 367.387 520.699 cv
367.525 520.938 367.443 521.244 367.204 521.382 cv
251.01 588.466 li
250.931 588.512 250.845 588.533 250.76 588.533 cv
cp
f
250.76 604.033 mo
250.588 604.033 250.419 603.943 250.327 603.783 cv
250.188 603.544 250.271 603.238 250.51 603.101 cv
366.704 536.017 li
366.943 535.879 367.25 535.96 367.387 536.199 cv
367.525 536.438 367.443 536.744 367.204 536.882 cv
251.01 603.966 li
250.931 604.012 250.845 604.033 250.76 604.033 cv
cp
f
250.76 619.533 mo
250.588 619.533 250.419 619.443 250.327 619.283 cv
250.188 619.044 250.271 618.738 250.51 618.601 cv
366.704 551.517 li
366.943 551.379 367.25 551.46 367.387 551.699 cv
367.525 551.938 367.443 552.244 367.204 552.382 cv
251.01 619.466 li
250.931 619.512 250.845 619.533 250.76 619.533 cv
cp
f
250.76 635.033 mo
250.588 635.033 250.419 634.943 250.327 634.783 cv
250.188 634.544 250.271 634.238 250.51 634.101 cv
366.704 567.017 li
366.943 566.879 367.25 566.96 367.387 567.199 cv
367.525 567.438 367.443 567.744 367.204 567.882 cv
251.01 634.966 li
250.931 635.012 250.845 635.033 250.76 635.033 cv
cp
f
215.315 588.533 mo
215.23 588.533 215.145 588.512 215.065 588.466 cv
117.385 532.068 li
117.146 531.931 117.064 531.625 117.202 531.386 cv
117.341 531.146 117.646 531.063 117.885 531.203 cv
215.565 587.601 li
215.805 587.738 215.887 588.044 215.748 588.283 cv
215.656 588.443 215.487 588.533 215.315 588.533 cv
cp
.6 .505882 .396078 rgb
f
215.315 604.033 mo
215.23 604.033 215.145 604.012 215.065 603.966 cv
117.385 547.569 li
117.146 547.432 117.064 547.126 117.202 546.887 cv
117.341 546.647 117.646 546.563 117.885 546.704 cv
215.565 603.101 li
215.805 603.238 215.887 603.544 215.748 603.783 cv
215.656 603.943 215.487 604.033 215.315 604.033 cv
cp
f
215.315 619.533 mo
215.23 619.533 215.145 619.512 215.065 619.466 cv
117.385 563.069 li
117.146 562.932 117.064 562.626 117.202 562.387 cv
117.341 562.147 117.646 562.063 117.885 562.204 cv
215.565 618.601 li
215.805 618.738 215.887 619.044 215.748 619.283 cv
215.656 619.443 215.487 619.533 215.315 619.533 cv
cp
f
215.315 635.033 mo
215.23 635.033 215.145 635.012 215.065 634.966 cv
117.385 578.569 li
117.146 578.432 117.064 578.126 117.202 577.887 cv
117.341 577.647 117.646 577.563 117.885 577.704 cv
215.565 634.101 li
215.805 634.238 215.887 634.544 215.748 634.783 cv
215.656 634.943 215.487 635.033 215.315 635.033 cv
cp
f
433.589 349.217 mo
213.612 222.215 li
213.612 58.4316 li
433.59 185.435 li
433.589 349.217 li
cp
level3{
gsave
clp
[219.978 0 0 219.978 213.612 203.824 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.360784 .305882 .235294 ]
/C1 [.360784 .305882 .235294 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.360784 .305882 .235294 ]
/C1 [.760784 .643137 .501961 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.760784 .643137 .501961 ]
/C1 [.760784 .643137 .501961 ]
/N 1 
>>
]
/Bounds [.702509 .939068 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[219.978 0 0 219.978 213.612 203.824 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=
>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=
>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[:]F@q91bBkqR'
E,p#BGBeF]I=Hg#KSG;>MiEaYP*;/tR$sP9T:r$UVPpJpXfen6ZaI9P]"G_k_8=(+_SX1,_SX1,_SX1,
~>
<~:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ
:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ
:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/=_b;cQk#=^,-:
?XR>QA7fIgC2@a)E,fr@Fa&(VH[U?mJV&Q/LPUeFN/is\P*;/sR$jD5SY)RLUSO]]Unjf^Unjf^Unjf^
~>
<~4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g
4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g
4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?Ykm5X@_)77Kd<
8P2WM:/=\`;H$Oq='/U/>?kH??t!MSA7]@cBkhF"D/O92EcZ>FG'A1VH[L6jIt3'"J:N0#J:N0#J:N0#
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
412.752 351.18 mo
209 233.545 li
209 81.8403 li
412.752 199.477 li
412.752 351.18 li
cp
level3{
gsave
clp
[203.752 0 0 203.752 209 216.51 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.45098 .313726 .105882 ]
/C1 [.45098 .313726 .105882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.45098 .313726 .105882 ]
/C1 [.85098 .596078 .2 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.85098 .596078 .2 ]
/C1 [.85098 .596078 .2 ]
/N 1 
>>
]
/Bounds [.706093 .860215 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.752 0 0 203.752 209 216.51 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDD
F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDD
F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uMLH[UEsKntVG
OHPlqR[g"EUo12nYHbIC\\,Ym_oBd@cHt%jf\+s2g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3
~>
<~:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb
:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb
:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f(%h<EE=-?!guK
A7fLhCMe!0F*)SMH@10kJV/Z3M2I7POHPfmQ^F/-R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.
~>
<~)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8
)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8
)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_9*$$(A+!;[L
+X/-U,U=Z_-7:/h.4H_r.kE5'/hSe10JP:;1,C^B1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
211 232.391 mo
410.752 347.717 li
410.752 200.632 li
211 85.3042 li
211 232.391 li
cp
412.752 353.18 mo
412.406 353.18 412.062 353.092 411.752 352.912 cv
208 235.278 li
207.381 234.92 207 234.26 207 233.545 cv
207 81.8403 li
207 81.126 207.381 80.4653 208 80.1084 cv
208.619 79.751 209.381 79.751 210 80.1084 cv
413.752 197.745 li
414.371 198.102 414.752 198.763 414.752 199.477 cv
414.752 351.18 li
414.752 351.895 414.371 352.555 413.752 352.912 cv
413.442 353.092 413.098 353.18 412.752 353.18 cv
cp
0 0 0 rgb
f
404.441 356.869 mo
200.688 239.233 li
200.688 87.5283 li
404.441 205.165 li
404.441 356.869 li
cp
level3{
gsave
clp
[203.753 0 0 203.753 200.688 222.199 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.121569 .227451 .301961 ]
/C1 [.121569 .227451 .301961 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.121569 .227451 .301961 ]
/C1 [.219608 .411765 .541176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.219608 .411765 .541176 ]
/C1 [.219608 .411765 .541176 ]
/N 1 
>>
]
/Bounds [.681004 .820788 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.753 0 0 203.753 200.688 222.199 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH
+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH
+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+<VgO+sS?Z,pjue-n-Sp
.kE5'/hSe20JP==1GgsH2E*QS3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW
~>
<~3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_
3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_
3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_4?Ykn5sdt.7S$*C92//W
;,U=m<``F->?tQB?t*VVAnPdkBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9q
~>
<~9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V
9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V
9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>W:Jk%i<`iO0?!guKA7]Cf
CM[m-EH?8HG^=acIt<3)L5:\DMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:K
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
202.688 238.079 mo
402.441 353.404 li
402.441 206.32 li
202.688 90.9922 li
202.688 238.079 li
cp
404.441 358.869 mo
404.096 358.869 403.751 358.779 403.441 358.602 cv
199.688 240.965 li
199.069 240.608 198.688 239.948 198.688 239.233 cv
198.688 87.5283 li
198.688 86.814 199.069 86.1533 199.688 85.7964 cv
200.308 85.439 201.069 85.439 201.688 85.7964 cv
405.441 203.433 li
406.061 203.79 406.441 204.451 406.441 205.165 cv
406.441 356.869 li
406.441 357.584 406.061 358.244 405.441 358.602 cv
405.132 358.779 404.787 358.869 404.441 358.869 cv
cp
0 0 0 rgb
f
391.338 364.434 mo
187.586 246.798 li
187.586 95.0933 li
391.338 212.73 li
391.338 364.434 li
cp
level3{
gsave
clp
[203.752 0 0 203.752 187.586 229.764 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.160784 .270588 .211765 ]
/C1 [.160784 .270588 .211765 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.160784 .270588 .211765 ]
/C1 [.32549 .541176 .423529 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.32549 .541176 .423529 ]
/C1 [.32549 .541176 .423529 ]
/N 1 
>>
]
/Bounds [.681004 .860215 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.752 0 0 203.752 187.586 229.764 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p
.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p
.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.P!&%/h\n40etOA2)[BQ
3BB5`4?Ykm5X@_(6q'O67n?3D92&&T:Jakb;H$Lm;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un
~>
<~77BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX6
77BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX6
77BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX67nH<H9i"S`;cQk#=^,-;
?X[DSAS5[kCMds.EH?5FGBnL^I=Hd!K8#&9M2I1JMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:K
~>
<~2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO
2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO
2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2`Wo\4?Yno5sdq,7Rp!@
8kVlR:Jane<)lt#=B\p6?!^lH@Uiq[B4u!oCM[g'Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
189.586 245.644 mo
389.338 360.969 li
389.338 213.885 li
189.586 98.5571 li
189.586 245.644 li
cp
391.338 366.434 mo
390.992 366.434 390.647 366.344 390.338 366.166 cv
186.586 248.531 li
185.967 248.173 185.586 247.513 185.586 246.798 cv
185.586 95.0933 li
185.586 94.3789 185.967 93.7183 186.586 93.3613 cv
187.205 93.0039 187.967 93.0039 188.586 93.3613 cv
392.338 210.998 li
392.957 211.355 393.338 212.016 393.338 212.73 cv
393.338 364.434 li
393.338 365.148 392.957 365.809 392.338 366.166 cv
392.028 366.344 391.684 366.434 391.338 366.434 cv
cp
0 0 0 rgb
f
384.791 368.213 mo
181.038 250.578 li
181.038 98.873 li
384.791 216.51 li
384.791 368.213 li
cp
level3{
gsave
clp
[203.753 0 0 203.753 181.038 233.543 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.470588 .160784 .25098 ]
/C1 [.470588 .160784 .25098 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.470588 .160784 .25098 ]
/C1 [.74902 .262745 .403922 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.74902 .262745 .403922 ]
/C1 [.74902 .262745 .403922 ]
/N 1 
>>
]
/Bounds [.659498 .860215 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.753 0 0 203.753 181.038 233.543 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IX
G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IX
G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+L[I!pKpJV/W1LPUhGN/is]P*;/s
R$jD5SXuLJUSO`aW2Zi!Y-5(8ZaI6N\[oDd^;%Ft^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou
~>
<~.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p
.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p
.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\q.P!##/1iG+/h\k30JP:;1,C^C
1c7-K2E*QS3&ru[3]fDc4?Yhk5!M7s5X@\&6:4+-6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.
~>
<~5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"
5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"
5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S#6:4+.77Ka:84cBF92&&S:/=\_
;,U=k<)lt"='/U.>$G6:?!^lG?t!MS@q9._AnPahB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kji
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
183.038 249.423 mo
382.791 364.75 li
382.791 217.665 li
183.038 102.337 li
183.038 249.423 li
cp
384.791 370.213 mo
384.445 370.213 384.101 370.125 383.791 369.945 cv
180.038 252.31 li
179.419 251.953 179.038 251.292 179.038 250.578 cv
179.038 98.873 li
179.038 98.1587 179.419 97.498 180.038 97.1411 cv
180.657 96.7837 181.419 96.7837 182.038 97.1411 cv
385.791 214.778 li
386.41 215.135 386.791 215.795 386.791 216.51 cv
386.791 368.213 li
386.791 368.928 386.41 369.588 385.791 369.945 cv
385.481 370.125 385.137 370.213 384.791 370.213 cv
cp
0 0 0 rgb
f
378.235 371.998 mo
174.482 254.363 li
174.482 102.658 li
378.235 220.294 li
378.235 371.998 li
cp
level3{
gsave
clp
[203.753 0 0 203.753 174.482 237.328 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.45098 .313726 .105882 ]
/C1 [.45098 .313726 .105882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.45098 .313726 .105882 ]
/C1 [.811765 .568627 .192157 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.811765 .568627 .192157 ]
/C1 [.85098 .596078 .2 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.85098 .596078 .2 ]
/C1 [.85098 .596078 .2 ]
/N 1 
>>
]
/Bounds [.641577 .792115 .827957 ]
/Encode [0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.753 0 0 203.753 174.482 237.328 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDD
F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDD
F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF*)VOH[^KtKnkPEO-,WlR%'Y=U84ZcX0/\4
[C<`[^;7_+aNDcRd*^:jeCE.%g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3
~>
<~:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb
:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb
:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f1+i<`iL/?!^oJ@qB:dC2@a*EH?5FG^4Xa
IXm$&KnkJAN/`m\OckomPa.Q$R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.
~>
<~)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8
)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8
)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]Kb:*??1B+!2UK+X/*T,:"Q]-71)f-n-Sp
.P!##/M/S-0/#"60ekC;1,:U?1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
176.482 253.208 mo
376.235 368.533 li
376.235 221.449 li
176.482 106.122 li
176.482 253.208 li
cp
378.235 373.998 mo
377.89 373.998 377.545 373.908 377.235 373.73 cv
173.482 256.095 li
172.863 255.738 172.482 255.078 172.482 254.363 cv
172.482 102.658 li
172.482 101.944 172.863 101.283 173.482 100.926 cv
174.102 100.569 174.863 100.569 175.482 100.926 cv
379.235 218.563 li
379.854 218.919 380.235 219.58 380.235 220.294 cv
380.235 371.998 li
380.235 372.713 379.854 373.373 379.235 373.73 cv
378.926 373.908 378.581 373.998 378.235 373.998 cv
cp
0 0 0 rgb
f
365.132 379.563 mo
161.38 261.927 li
161.38 110.223 li
365.132 227.86 li
365.132 379.563 li
cp
level3{
gsave
clp
[203.752 0 0 203.752 161.38 244.893 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.411765 .247059 .0941176 ]
/C1 [.411765 .247059 .0941176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.411765 .247059 .0941176 ]
/C1 [.678431 .407843 .156863 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.678431 .407843 .156863 ]
/C1 [.678431 .407843 .156863 ]
/N 1 
>>
]
/Bounds [.602151 .835125 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.752 0 0 203.752 161.38 244.893 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qCM[j*DfB];FEMbNG^4X`I=?ZrJV/W0L51SAMi<XUO-#Kf
Pa.Q$R$jD5SXuIHTq\?ZVPgAlWiW>)Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-
~>
<~5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s
5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s
5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5X7V%6UO7177Kd;84cBF91qrQ:/4S]:f1+g;cH^r<`W:(
=]np4>?kH>?=.&I@:<VTA7T7`AnPdjBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'m
~>
<~(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),
(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),
(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4,.)&X>2)B'P6)]Kb:*$$%?*?H7C*ZlIG+<VdL+X&!P
+sJ3T,9nEY,U=W],paia-71&e-RU;j-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
163.38 260.773 mo
363.132 376.1 li
363.132 229.014 li
163.38 113.687 li
163.38 260.773 li
cp
365.132 381.563 mo
364.786 381.563 364.441 381.475 364.132 381.295 cv
160.38 263.66 li
159.761 263.302 159.38 262.642 159.38 261.927 cv
159.38 110.223 li
159.38 109.508 159.761 108.848 160.38 108.491 cv
160.999 108.133 161.761 108.133 162.38 108.491 cv
366.132 226.127 li
366.751 226.485 367.132 227.145 367.132 227.86 cv
367.132 379.563 li
367.132 380.277 366.751 380.938 366.132 381.295 cv
365.822 381.475 365.478 381.563 365.132 381.563 cv
cp
0 0 0 rgb
f
345.87 390.684 mo
142.117 273.049 li
142.117 121.344 li
345.87 238.981 li
345.87 390.684 li
cp
level3{
gsave
clp
[203.753 0 0 203.753 142.117 256.014 ]ct
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.470588 .160784 .25098 ]
/C1 [.470588 .160784 .25098 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.470588 .160784 .25098 ]
/C1 [.74902 .262745 .403922 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.74902 .262745 .403922 ]
/C1 [.74902 .262745 .403922 ]
/N 1 
>>
]
/Bounds [.537634 .706093 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.753 0 0 203.753 142.117 256.014 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IX
G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IX
G^+IXG^+IXG^+IZH[UBoJqSi5M2I7PO-,TiQC"#/S=ZCIUSXidWN3/(Yd1UC\%'#^]t_=s^V@Ou^V@Ou
^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou
~>
<~.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p
.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p
.4H\p.4H\p.4H\p.P!##/1iJ,0/#"60etL?1c.'I2E*QS3&s#\4$,Pf4[)%o5X7V$6:4+-6UO4.6UO4.
6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.
~>
<~5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"
5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"
5X7S"5X7S"5X7S#6:4+.77Kd<8P2WL9MJ8X:f1+h<)lt"='/U/>?kH??XI2L@Uiq[AnPahB4kjiB4kji
B4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kji
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
144.117 271.895 mo
343.87 387.221 li
343.87 240.135 li
144.117 124.808 li
144.117 271.895 li
cp
345.87 392.684 mo
345.524 392.684 345.18 392.596 344.87 392.416 cv
141.117 274.782 li
140.498 274.424 140.117 273.764 140.117 273.049 cv
140.117 121.344 li
140.117 120.63 140.498 119.969 141.117 119.612 cv
141.736 119.255 142.498 119.255 143.117 119.612 cv
346.87 237.249 li
347.489 237.606 347.87 238.266 347.87 238.981 cv
347.87 390.684 li
347.87 391.398 347.489 392.059 346.87 392.416 cv
346.561 392.596 346.216 392.684 345.87 392.684 cv
cp
0 0 0 rgb
f
338.927 394.693 mo
135.174 277.057 li
135.174 125.353 li
338.927 242.989 li
338.927 394.693 li
cp
level3{
gsave
clp
[203.753 0 0 203.753 135.174 260.023 ]ct
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.121569 .227451 .301961 ]
/C1 [.121569 .227451 .301961 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.121569 .227451 .301961 ]
/C1 [.219608 .411765 .541176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.219608 .411765 .541176 ]
/C1 [.219608 .411765 .541176 ]
/N 1 
>>
]
/Bounds [.494624 .724014 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.753 0 0 203.753 135.174 260.023 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH
+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH+!2RH
+!;[K+X&$R+sS<X,UF`_-71)f-n$Jm.4Qet.k</%/M/S-/h\k30JP::1,:XA1c.$H2)[?O2`E]U3&ilW
3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW3&ilW
~>
<~3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_
3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_
4$,Pf5!M7s5sdq+6q'R87n?3D91qrQ:/=Y^;,U=k<)lt#='/U/>?b?<?=.&I@:E_VA7]@cB4u!nBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9q
~>
<~9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V
9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V9he>V
:/=\`;H$Op<``C+>$G6<?XR;O@q9._B4u!oCM[j*DfB]:F*)PJGBnL]I!pHnJ:W<)KS>/9Ll%"HMMd:K
MMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:K
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
137.174 275.903 mo
336.927 391.229 li
336.927 244.143 li
137.174 128.816 li
137.174 275.903 li
cp
338.927 396.693 mo
338.581 396.693 338.236 396.604 337.927 396.426 cv
134.174 278.79 li
133.555 278.432 133.174 277.772 133.174 277.057 cv
133.174 125.353 li
133.174 124.638 133.555 123.978 134.174 123.621 cv
134.793 123.263 135.555 123.263 136.174 123.621 cv
339.927 241.256 li
340.546 241.614 340.927 242.274 340.927 242.989 cv
340.927 394.693 li
340.927 395.408 340.546 396.068 339.927 396.426 cv
339.617 396.604 339.272 396.693 338.927 396.693 cv
cp
0 0 0 rgb
f
325.823 402.258 mo
122.071 284.622 li
122.071 132.917 li
325.823 250.554 li
325.823 402.258 li
cp
level3{
gsave
clp
[203.752 0 0 203.752 122.071 267.588 ]ct
/9 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.160784 .270588 .211765 ]
/C1 [.160784 .270588 .211765 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.160784 .270588 .211765 ]
/C1 [.32549 .541176 .423529 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.32549 .541176 .423529 ]
/C1 [.32549 .541176 .423529 ]
/N 1 
>>
]
/Bounds [.480287 .724014 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.752 0 0 203.752 122.071 267.588 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p
.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4Qhu
/1iG+0/#"60etO@1c7-K2`E]V3BB5`4?Yhk5<hD!5sdq+6q'O67n6*A8kM`M9MJ8W:Jakb;GpFl;c?Un
;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un
~>
<~77BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX6
77BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX67Rp!@
8kViP:Jand;cHat='/X1>[:ZC?t!MTAS,RgBkhF"D/XB5EcZ>FG'A4XH[L6jIt3*%KS>/9Ll%"HMMd:K
MMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:KMMd:K
~>
<~2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO
2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E*TU
3]fGd4[)(q5sdq+6q'R884cBF92&&T:Jakb;H$Op<`W:(=^#$7>[:ZC?t!MS@q9._B4u!nC27X%Ci!p(
Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(Ci!p(
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
124.071 283.467 mo
323.823 398.793 li
323.823 251.708 li
124.071 136.381 li
124.071 283.467 li
cp
325.823 404.258 mo
325.478 404.258 325.133 404.168 324.823 403.99 cv
121.071 286.354 li
120.452 285.997 120.071 285.336 120.071 284.622 cv
120.071 132.917 li
120.071 132.203 120.452 131.542 121.071 131.186 cv
121.69 130.828 122.452 130.828 123.071 131.186 cv
326.823 248.822 li
327.442 249.179 327.823 249.839 327.823 250.554 cv
327.823 402.258 li
327.823 402.973 327.442 403.633 326.823 403.99 cv
326.514 404.168 326.169 404.258 325.823 404.258 cv
cp
0 0 0 rgb
f
319.044 406.172 mo
115.291 288.536 li
115.291 136.831 li
319.044 254.467 li
319.044 406.172 li
cp
level3{
gsave
clp
[203.753 0 0 203.753 115.291 271.501 ]ct
/10 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.411765 .247059 .0941176 ]
/C1 [.411765 .247059 .0941176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.411765 .247059 .0941176 ]
/C1 [.678431 .407843 .156863 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.678431 .407843 .156863 ]
/C1 [.678431 .407843 .156863 ]
/N 1 
>>
]
/Bounds [.480287 .724014 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.753 0 0 203.753 115.291 271.501 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qC27X&
DJsK6EcZAHGBeCZH[L6jIt<3(KS>/9Ll%"INK0']OckomQ'Rc)R[]h<StD[LU8+N]Vl6SpX/rG*Xf\_-
Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-
~>
<~5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s
5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<h@s5<qM#
6:+%-6q'R77n?0B8kM`M9MJ8W:Jakb;GpFm<)lt"='/R-=^#$6>[:WA?XI2L@:E_VA7]=aB4kmkBP;'m
BP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'m
~>
<~(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),
(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4)-
)&X;1)B'M5)]K_9*#oq=*??.A*Zc@E+!2RI+<VdM+X&$R+sJ6V,9nHZ,U=Z^,palb-71)f-RU;j-n$Jl
-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
117.291 287.381 mo
317.044 402.707 li
317.044 255.622 li
117.291 140.295 li
117.291 287.381 li
cp
319.044 408.172 mo
318.698 408.172 318.354 408.082 318.044 407.904 cv
114.291 290.268 li
113.672 289.911 113.291 289.25 113.291 288.536 cv
113.291 136.831 li
113.291 136.117 113.672 135.456 114.291 135.099 cv
114.91 134.742 115.672 134.742 116.291 135.099 cv
320.044 252.735 li
320.663 253.092 321.044 253.752 321.044 254.467 cv
321.044 406.172 li
321.044 406.887 320.663 407.547 320.044 407.904 cv
319.734 408.082 319.39 408.172 319.044 408.172 cv
cp
0 0 0 rgb
f
310.876 413.338 mo
107.124 295.703 li
107.124 143.998 li
310.876 261.634 li
310.876 413.338 li
cp
level3{
gsave
clp
[203.752 0 0 203.752 107.124 278.668 ]ct
/11 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.470588 .160784 .25098 ]
/C1 [.470588 .160784 .25098 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.470588 .160784 .25098 ]
/C1 [.74902 .262745 .403922 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.74902 .262745 .403922 ]
/C1 [.74902 .262745 .403922 ]
/N 1 
>>
]
/Bounds [.426523 .709677 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.752 0 0 203.752 107.124 278.668 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IX
G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IYH@($fIXcm!JqJ`1L51SA
MMmFQNfT9aP*;,qQC!u,R[]h<St;RITq\<XV5C/hWN*##Xfek3Z*L^C[C3QS\[oDc]tV7r^V@Ou^V@Ou
^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou
~>
<~.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p
.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.4H\p.Olnu.k</%/1iG*/hSe1
0/,(60ekC<1,:XA1c.$H2)R9M2E*QR3&ioY3BB2^4$,Md4?Yhj5!D.p5<hCu5X@\&6:+%,6UO4.6UO4.
6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.
~>
<~5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"
5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5sdn*6UX=277Ka:7n?3C
8kM`L9MA/T:/4S]:f1(f;H$Ln<)lq!='&L+=]np3>?b?;?!^iE?XR8M@:E\U@q9.^AnG[gB4kjiB4kji
B4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kjiB4kji
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
109.124 294.548 mo
308.876 409.873 li
308.876 262.789 li
109.124 147.461 li
109.124 294.548 li
cp
310.876 415.338 mo
310.53 415.338 310.186 415.248 309.876 415.07 cv
106.124 297.435 li
105.505 297.078 105.124 296.417 105.124 295.703 cv
105.124 143.998 li
105.124 143.283 105.505 142.623 106.124 142.266 cv
106.743 141.908 107.505 141.908 108.124 142.266 cv
311.876 259.902 li
312.495 260.259 312.876 260.919 312.876 261.634 cv
312.876 413.338 li
312.876 414.053 312.495 414.713 311.876 415.07 cv
311.566 415.248 311.222 415.338 310.876 415.338 cv
cp
0 0 0 rgb
f
299.618 417.387 mo
95.8652 299.751 li
95.8652 148.047 li
299.618 265.683 li
299.618 417.387 li
cp
level3{
gsave
clp
[203.753 0 0 203.753 95.8652 282.717 ]ct
/12 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.45098 .313726 .105882 ]
/C1 [.45098 .313726 .105882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.45098 .313726 .105882 ]
/C1 [.85098 .596078 .2 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.85098 .596078 .2 ]
/C1 [.85098 .596078 .2 ]
/N 1 
>>
]
/Bounds [.430108 .691756 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[203.753 0 0 203.753 95.8652 282.717 ]ct
clp
/12 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDD
F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDEFa&(VH[UBoJqJc3Ll%%K
NfT<cPa.T&R[]k>TVA3XVPpJpXKJb3ZF%$K\@T;c^;.V'`Q$!@bKS8XdF-Opf@\d0g"G'3g"G'3g"G'3
g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3
~>
<~:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb
:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb;H$Op<``C+>$G6;?=72N
@q9._B4u!oCM[j+E,fo>FEMbNG^4U^I=?ZrJV&N-KnbA=M2R=PNfT9aP*;,qQC!u+R$a8.R$a8.R$a8.
R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.
~>
<~)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8
)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]Th;*??.A*ZcCF+!;[L
+X&$R+sS<W,U=W],pjrc-RU8i-n$Mn.Olnu.k</%/1iG*/hSe10/,(60ekC<1,:XA1G^gC1G^gC1G^gC
1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /12 /Gradient get_res exec grestore
}if
np
97.8652 298.597 mo
297.618 413.924 li
297.618 266.837 li
97.8652 151.511 li
97.8652 298.597 li
cp
299.618 419.387 mo
299.272 419.387 298.928 419.299 298.618 419.119 cv
94.8652 301.484 li
94.2461 301.126 93.8652 300.466 93.8652 299.751 cv
93.8652 148.047 li
93.8652 147.333 94.2461 146.672 94.8652 146.315 cv
95.4844 145.958 96.2461 145.958 96.8652 146.315 cv
300.618 263.951 li
301.237 264.308 301.618 264.968 301.618 265.683 cv
301.618 417.387 li
301.618 418.102 301.237 418.762 300.618 419.119 cv
300.309 419.299 299.964 419.387 299.618 419.387 cv
cp
0 0 0 rgb
f
388.677 231.963 mo
334.762 263.091 li
340.114 280.47 li
384.663 254.75 li
388.677 231.963 li
cp
433.59 349.221 mo
283.744 435.73 li
283.744 271.948 li
433.59 185.435 li
433.59 349.221 li
cp
.803922 .713726 .588235 rgb
f
283.744 435.73 mo
63.7686 308.728 li
63.7686 144.944 li
283.746 271.948 li
283.744 435.73 li
cp
.760784 .643137 .501961 rgb
f
337.143 264.026 mo
341.287 277.484 li
382.855 253.485 li
385.963 235.839 li
337.143 264.026 li
cp
340.114 282.47 mo
339.867 282.47 339.619 282.424 339.383 282.332 cv
338.816 282.109 338.382 281.641 338.203 281.059 cv
332.851 263.68 li
332.576 262.789 332.954 261.826 333.762 261.359 cv
387.677 230.231 li
388.35 229.842 389.186 229.878 389.824 230.325 cv
390.46 230.771 390.781 231.544 390.646 232.31 cv
386.633 255.097 li
386.53 255.68 386.175 256.187 385.663 256.483 cv
341.114 282.203 li
340.807 282.38 340.461 282.47 340.114 282.47 cv
cp
0 0 0 rgb
f
98.5977 216.277 mo
96.6973 203.111 li
96.1543 199.372 95.5439 194.191 95.002 190.218 cv
94.7979 190.101 li
94.3223 193.486 93.6445 198.078 93.1016 201.035 cv
91.0654 211.928 li
98.5977 216.277 li
cp
90.251 217.921 mo
87.8086 230.215 li
80.751 226.14 li
90.9297 179.536 li
99.4121 184.433 li
108.844 242.36 li
101.787 238.286 li
99.3438 223.17 li
90.251 217.921 li
cp
.6 .505882 .396078 rgb
f
120.719 221.029 mo
122.618 222.125 li
126.961 224.632 129.676 222.306 129.676 216.934 cv
129.676 211.794 127.911 207.272 123.161 204.452 cv
122.279 203.942 121.329 203.472 120.719 203.353 cv
120.719 221.029 li
cp
113.525 193.36 mo
116.036 194.109 119.226 195.639 122.279 197.402 cv
126.961 200.105 130.896 203.312 133.61 207.759 cv
136.122 212.012 137.071 216.065 137.071 220.425 cv
137.071 226.499 134.493 229.759 129.879 229.509 cv
129.879 229.666 li
133.068 232.831 134.765 237.314 135.646 244.052 cv
136.665 251.025 137.75 257.257 138.497 259.48 cv
130.965 255.131 li
130.354 253.299 129.404 247.612 128.59 240.99 cv
127.708 233.707 126.011 230.469 122.415 228.393 cv
120.719 227.414 li
120.719 249.216 li
113.525 245.063 li
113.525 193.36 li
cp
f
163.942 273.314 mo
162.586 273.31 160.211 272.484 157.225 270.759 cv
146.774 264.726 140.804 251.468 140.804 235.272 cv
140.804 215.105 150.1 213.23 158.242 217.932 cv
161.229 219.656 163.264 221.532 164.214 222.703 cv
162.857 228.927 li
161.771 227.755 160.686 226.662 158.514 225.408 cv
153.561 222.548 148.471 224.827 148.471 239.154 cv
148.471 253.248 153.085 260.973 158.582 264.146 cv
160.278 265.125 161.975 265.716 163.06 265.797 cv
163.942 273.314 li
cp
f
175.613 228.427 mo
175.613 250.152 li
186.47 256.42 li
186.47 234.696 li
193.73 238.888 li
193.73 291.369 li
186.47 287.177 li
186.47 264.051 li
175.613 257.783 li
175.613 280.91 li
168.353 276.717 li
168.353 224.236 li
175.613 228.427 li
cp
f
208.318 247.31 mo
208.318 299.792 li
201.058 295.599 li
201.058 243.119 li
208.318 247.31 li
cp
f
222.568 308.019 mo
212.253 249.582 li
220.192 254.166 li
223.992 279.875 li
224.874 286.146 226.027 293.742 226.707 300.519 cv
226.91 300.636 li
227.521 294.527 228.539 288.417 229.421 282.853 cv
233.153 261.648 li
241.024 266.193 li
230.439 312.563 li
222.568 308.019 li
cp
f
262.873 307.384 mo
252.017 301.116 li
252.017 317.779 li
264.366 324.91 li
264.366 332.151 li
244.756 320.829 li
244.756 268.347 li
263.552 279.199 li
263.552 286.441 li
252.017 279.781 li
252.017 294.186 li
262.873 300.454 li
262.873 307.384 li
cp
f
300.679 342.848 mo
300.507 342.848 300.338 342.758 300.246 342.598 cv
300.107 342.357 300.189 342.053 300.429 341.914 cv
416.624 274.831 li
416.863 274.693 417.169 274.774 417.307 275.013 cv
417.445 275.252 417.363 275.558 417.124 275.696 cv
300.929 342.779 li
300.85 342.826 300.764 342.848 300.679 342.848 cv
cp
.54902 .490196 .403922 rgb
f
300.679 358.348 mo
300.507 358.348 300.338 358.258 300.246 358.098 cv
300.107 357.857 300.189 357.553 300.429 357.414 cv
416.624 290.331 li
416.863 290.193 417.169 290.274 417.307 290.513 cv
417.445 290.752 417.363 291.058 417.124 291.196 cv
300.929 358.279 li
300.85 358.326 300.764 358.348 300.679 358.348 cv
cp
f
300.679 373.848 mo
300.507 373.848 300.338 373.758 300.246 373.598 cv
300.107 373.357 300.189 373.053 300.429 372.914 cv
416.624 305.831 li
416.863 305.693 417.169 305.774 417.307 306.013 cv
417.445 306.252 417.363 306.558 417.124 306.696 cv
300.929 373.779 li
300.85 373.826 300.764 373.848 300.679 373.848 cv
cp
f
300.679 389.348 mo
300.507 389.348 300.338 389.258 300.246 389.098 cv
300.107 388.857 300.189 388.553 300.429 388.414 cv
416.624 321.331 li
416.863 321.192 417.169 321.274 417.307 321.513 cv
417.445 321.752 417.363 322.058 417.124 322.196 cv
300.929 389.279 li
300.85 389.326 300.764 389.348 300.679 389.348 cv
cp
f
300.679 404.848 mo
300.507 404.848 300.338 404.758 300.246 404.598 cv
300.107 404.357 300.189 404.053 300.429 403.914 cv
416.624 336.83 li
416.863 336.691 417.169 336.775 417.307 337.014 cv
417.445 337.252 417.363 337.559 417.124 337.695 cv
300.929 404.779 li
300.85 404.826 300.764 404.848 300.679 404.848 cv
cp
f
265.235 358.348 mo
265.15 358.348 265.064 358.326 264.985 358.279 cv
167.306 301.882 li
167.066 301.745 166.984 301.439 167.123 301.2 cv
167.261 300.96 167.567 300.879 167.806 301.017 cv
265.485 357.414 li
265.725 357.553 265.807 357.857 265.668 358.098 cv
265.576 358.258 265.407 358.348 265.235 358.348 cv
cp
.6 .505882 .396078 rgb
f
265.235 373.848 mo
265.15 373.848 265.064 373.826 264.985 373.779 cv
167.306 317.383 li
167.066 317.246 166.984 316.94 167.123 316.701 cv
167.261 316.461 167.567 316.38 167.806 316.518 cv
265.485 372.914 li
265.725 373.053 265.807 373.357 265.668 373.598 cv
265.576 373.758 265.407 373.848 265.235 373.848 cv
cp
f
265.235 389.348 mo
265.15 389.348 265.064 389.326 264.985 389.279 cv
167.306 332.883 li
167.066 332.746 166.984 332.44 167.123 332.201 cv
167.261 331.961 167.567 331.88 167.806 332.018 cv
265.485 388.414 li
265.725 388.553 265.807 388.857 265.668 389.098 cv
265.576 389.258 265.407 389.348 265.235 389.348 cv
cp
f
265.235 404.848 mo
265.15 404.848 265.064 404.826 264.985 404.779 cv
167.306 348.383 li
167.066 348.246 166.984 347.939 167.123 347.701 cv
167.261 347.461 167.567 347.381 167.806 347.518 cv
265.485 403.914 li
265.725 404.053 265.807 404.357 265.668 404.598 cv
265.576 404.758 265.407 404.848 265.235 404.848 cv
cp
f
429.59 346.912 mo
287.744 428.805 li
287.744 274.257 li
429.59 192.363 li
429.59 346.912 li
cp
67.7686 151.873 mo
279.744 274.257 li
279.744 428.803 li
67.7686 306.418 li
67.7686 151.873 li
cp
437.578 185.253 mo
437.575 185.191 437.571 185.13 437.565 185.068 cv
437.545 184.844 437.512 184.623 437.455 184.409 cv
437.454 184.405 437.454 184.402 437.452 184.398 cv
437.394 184.178 437.31 183.966 437.215 183.76 cv
437.189 183.706 437.163 183.653 437.136 183.6 cv
437.041 183.417 436.935 183.241 436.813 183.075 cv
436.798 183.054 436.786 183.031 436.771 183.011 cv
436.634 182.831 436.476 182.667 436.309 182.511 cv
436.264 182.469 436.218 182.429 436.17 182.389 cv
435.989 182.236 435.8 182.092 435.59 181.971 cv
215.613 54.9673 li
213.699 53.8647 211.253 54.5186 210.149 56.4316 cv
209.045 58.3447 209.7 60.791 211.613 61.896 cv
425.59 185.435 li
283.744 267.33 li
65.7686 141.48 li
64.5303 140.766 63.0068 140.766 61.7686 141.48 cv
60.5313 142.195 59.7686 143.515 59.7686 144.944 cv
59.7686 308.728 li
59.7686 310.157 60.5313 311.478 61.7686 312.192 cv
281.712 439.172 li
281.724 439.18 281.733 439.188 281.744 439.193 cv
282.363 439.551 283.054 439.73 283.744 439.73 cv
284.435 439.73 285.125 439.551 285.744 439.193 cv
435.59 352.686 li
436.827 351.971 437.59 350.65 437.59 349.221 cv
437.59 185.435 li
437.59 185.374 437.581 185.314 437.578 185.253 cv
cp
0 0 0 rgb
f
95.6943 209.657 mo
36.7256 83.9648 li
36.7256 51.8486 li
95.6953 177.543 li
95.6943 209.657 li
cp
.760784 .643137 .501961 rgb
f
408.402 161.806 mo
95.6943 209.657 li
95.6953 177.543 li
408.402 129.693 li
408.402 161.806 li
cp
.803922 .713726 .588235 rgb
f
408.402 129.693 mo
95.6943 177.543 li
36.7256 51.8486 li
349.433 3.99902 li
408.402 129.693 li
cp
.917647 .827451 .694118 rgb
f
99.6943 204.998 mo
99.6943 180.978 li
404.402 134.352 li
404.402 158.371 li
99.6943 204.998 li
cp
40.7256 69.792 mo
91.6943 178.435 li
91.6943 191.712 li
40.7256 83.0703 li
40.7256 69.792 li
cp
347.081 8.40527 mo
354.598 24.4263 li
354.281 24.4883 353.967 24.5757 353.661 24.7188 cv
351.661 25.6572 350.801 28.0391 351.739 30.0391 cv
361.299 50.4175 li
361.979 51.8687 363.419 52.7197 364.923 52.7197 cv
365.491 52.7197 366.069 52.5977 366.619 52.3403 cv
366.925 52.1968 367.193 52.0107 367.443 51.8066 cv
381.966 82.7622 li
381.649 82.8242 381.333 82.9121 381.027 83.0557 cv
379.027 83.9937 378.167 86.376 379.105 88.376 cv
388.402 108.191 li
389.083 109.642 390.523 110.493 392.026 110.493 cv
392.595 110.493 393.173 110.371 393.723 110.113 cv
394.028 109.969 394.297 109.783 394.547 109.579 cv
402.509 126.549 li
98.0449 173.137 li
90.333 156.7 li
90.5869 156.637 90.8389 156.559 91.085 156.443 cv
93.085 155.505 93.9453 153.123 93.0068 151.124 cv
83.7109 131.31 li
82.7725 129.31 80.3945 128.448 78.3906 129.387 cv
78.1465 129.502 77.9199 129.639 77.7109 129.794 cv
63.2305 98.9268 li
63.4834 98.8647 63.7363 98.7861 63.9814 98.6709 cv
65.9814 97.7329 66.8418 95.3511 65.9033 93.3511 cv
56.3438 72.9731 li
55.4063 70.9736 53.0293 70.1108 51.0234 71.0508 cv
50.7793 71.1655 50.5527 71.3032 50.3428 71.4575 cv
42.6191 54.9932 li
347.081 8.40527 li
cp
412.319 128.88 mo
412.318 128.877 412.317 128.875 412.316 128.873 cv
412.257 128.586 412.161 128.314 412.043 128.054 cv
412.034 128.035 412.032 128.014 412.023 127.995 cv
353.054 2.30029 li
352.301 .694336 350.567 -.219238 348.828 .0449219 cv
36.1201 47.8945 li
36.0898 47.8989 36.0635 47.9131 36.0332 47.9185 cv
35.7969 47.96 35.5703 48.0254 35.3496 48.1069 cv
35.3018 48.1245 35.25 48.1328 35.2021 48.1528 cv
34.9346 48.2632 34.6836 48.4023 34.4492 48.5649 cv
34.3877 48.6074 34.3369 48.6602 34.2783 48.7056 cv
34.1123 48.8354 33.9531 48.9727 33.8096 49.1265 cv
33.7402 49.2007 33.6797 49.2813 33.6162 49.3608 cv
33.4971 49.5093 33.3887 49.6636 33.292 49.8281 cv
33.2627 49.8765 33.2227 49.9155 33.1963 49.9653 cv
33.1729 50.0093 33.1641 50.0581 33.1426 50.103 cv
33.0576 50.2764 32.9902 50.4565 32.9307 50.6421 cv
32.9014 50.7373 32.8662 50.8296 32.8428 50.9263 cv
32.7979 51.1187 32.7754 51.3174 32.7588 51.519 cv
32.751 51.6113 32.7324 51.7017 32.7314 51.7944 cv
32.7305 51.813 32.7256 51.8301 32.7256 51.8486 cv
32.7256 83.9619 li
32.7256 84.5493 32.8545 85.1294 33.1045 85.6606 cv
92.0732 211.355 li
92.1592 211.539 92.2588 211.712 92.3682 211.877 cv
92.3877 211.905 92.4111 211.93 92.4307 211.958 cv
92.5459 212.121 92.6729 212.273 92.8086 212.416 cv
92.8564 212.465 92.9053 212.511 92.9551 212.558 cv
93.083 212.68 93.2188 212.791 93.3613 212.894 cv
93.4092 212.928 93.4541 212.966 93.5039 212.999 cv
93.6924 213.122 93.8896 213.23 94.0957 213.32 cv
94.1484 213.343 94.2041 213.359 94.2588 213.38 cv
94.4268 213.445 94.5986 213.499 94.7744 213.54 cv
94.8428 213.556 94.9102 213.572 94.9795 213.584 cv
95.2139 213.627 95.4502 213.657 95.6924 213.657 cv
95.6934 213.657 li
95.6943 213.657 li
95.6963 213.657 95.6982 213.656 95.7002 213.656 cv
95.8994 213.656 96.0996 213.641 96.2998 213.611 cv
409.008 165.76 li
410.96 165.461 412.402 163.781 412.402 161.806 cv
412.402 129.693 li
412.402 129.415 412.373 129.143 412.319 128.88 cv
cp
0 0 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (Zern) ()
%%Title: (archive-boxes-stack.eps)
%%CreationDate: 6/4/2012 11:31 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBij%[e+WZacC+^jlk$t2[0oNW]Fbb^"A$U/N%Mi][N$rgao12om;H!I958_e'/El`dD2,iDcL(ke^?&6_1S98CK>5qbFJV,
%7V5@n12DW>A.5#?D"d$6%j!j:*I43#+k=[i`\])X4'B`]*%7t#29U"q[ZY4%L@kn&V:Y4*h8?[.nN*5R?h`<GND0=a\XD,(?c"b`
%b^6O"p]&CslK-/Ge8]\lZVmpnQ2Gg#gs)3hKo"G#<IWDJ>0m7u(A-EpV;A8!LJZm/mPa##%XhiXd3$D8[gRhC?AXl@SX_g0NJp3U
%d`3U$ZI\9KbMAWEr4ItWh-H4gHL/&^r!R0Hg4=#G^<@;(MfQ#XjeKpcV;Pj-3J1&-A.Dd6ktirF3b!1[io5GB4!Xs\)T2TL@Y:<B
%Z^T8s3q)8$Y^h/#]RZtlF9B6X70PTr!E,4sO=8![YL0A:],j\KC=lZfZ#l@C6dIO,G(u*1MD.sqBq28u31peZV.U7,Z&E*.=bA.=
%0Q(H%bL&_K81D1n2=I`.b]Bsmp"EmCh0/P&p-4pSdr;UQBk\GXfAM:YMZQD^]%;D[XEDLH]"8HEVL?5EeH6^I<2u:)iapNbDc,Mi
%gqNElT\4e-LU4>gRN$YKWn5lRs7G#C-O26,H/cT8+g:.A!Qkm=esMZOCrOLE=jo40N2,&Db:nN>Kb@'8Ura*-^t,`lTGJ"!nIQE.
%TO#122)j)'<*]SD$>&(.f;arc>AD1?^PJSb/c@ZFNu0fHU"f7/!@(9$bO7qQ.8"d`)#GpDX*MI2'8,W65n;I5':)8H^D,QpJ'`Dd
%7'@o(+i;n_+"Gd/f^PM_]].i%B8?.$I(@`"H`c,dL&^<X95`9EpG+G([[5t1/n^L6:\aqnr]aVi[?`2iLXcV@&N.A'`T@]7m^K!H
%6V=mlc((*SXX&l.RP`4T%"/_r]iY(3hir]0W:bt4UtLrT\H:4$*1VNM.Y&+(Je3>kma\n*fKTM@BgEun5F(IPm?dt'=,FL<GHV"=
%]k4Yc[a+p>P630ZC%D%3j4pii3fU@0R1asD34c9EDB:Y10\a:d<T_6ol]E<7!V'0c0C:Bq1GbSTKnjdN?d<QLq/X/T]53g<=1-2T
%p4n#;Fu5q2+t]gVe;*]6s!mAOYf:MOK7^h928K]5#QZ-kq2H0d?('`REXTukZ6Y]og,7.UUh(*D>Pn"&nBc2M)5VQ2j_>5iINu2k
%VV*LZ]P?S,O>9L,TW-ml0JdGj=8h`OO+7/6p#dEB9=dgn0u>#]l/<.Z)ZB.u%50%\Y_oth?HJIQ7CW\Hjl+AD>l&G]:<jWAPr%AS
%kgJDk^Z$]%aXY)k[rRcBQNNRk=dBA\@Hj(iWGjRbYnXNT(<qF;6cFdRf5s\*/dq$T@;9b\-8QAM`ak<mU/:o&YVXmM%,7up-tMO\
%Bncs21DINu(\Ih`M8O=U8%3Uk(_cG$,AqP?8Nu2_il[tp>N.U4a19-+:%>!"I\B1>0&Sdg_St_ojV51W5Ank#Lu3Jk*e.GH&XON\
%W<cBg$!AAgc!hfV!m&2$$0]Gnn6LS4OC+22A]/)M\?g9Uf6*r@>#?fcFLlu$TfJPFK$uSOA"',-eH/FIX#d6i68qkLePrCqXMg!t
%!7RKK0!jMgNe/uO=Vi]$.M&opcpgSYBaS*=KBggh%MoNWqLLqJ2I):)_Nc@B._o'68m4efhuZtMLMidmrkmtU@GDXBN!#CS=,te9
%!*9bW.iA]<,bl4doh!Z=WCDn?(I^nD"cXEC*=HE=J8XF59+%=D-.!V91=SRP#0>6t\[ip>]NP%$&(%p$BHRCO"QpAmDo*LH0G?'4
%HQKQ'BU*B;7&'g1\nut$>./90[Mt0^\.<fp3%kJ@9,pJ"\tk\g(oK?BiW+'?H&/s9q$9!;GQIhFn3\2CR.SUTZWru-6-3:;KAhIO
%WEPUfRckF&g,$SFbpp0IkUR*/#]ric\muQl!UVR?LbUZ>P-H1e;ji2RU/QA]MbW=p1d[\r<5ML_Hh`+)@I$=498*n\p+<#;Q=ALr
%2)]7>k"H`R+%;MdG[!o%#]k\*b6+\<%c?CSpbr$.)^^jn%]:0k)aUVl5Sl[+Jt57/@$>mZkSXHq!oW+cLVQ^h4X`i4-pWle!\<N.
%QFInH1eOFD*&qu3_@BhZ(;aY1.baA*r&3e`oX?^Mqqu[;):<A9d@eg1l/?Pd\o9X/poTG2N%Us*"QON%8"h"?r7E=-#X8Lh.GB(B
%S[VliF8URm$d0<8E;AK;7LN_QP/`3XrqQfs*u?rT"`K[a671'0EV!`T4PKuM#(ZqE"q(iA0J8e3K4Y8LK$OG>*p&E<a^H)r_W?r8
%kmLn1"K^_dE*]i0*2Wam<<:VN:]mcF/O22BRE"/XVLZ+@5WAon%i<k="U(R8.TO?29Eo5SWB<bU6rI#N)0A\9'5Y/F3+0)`:;JA?
%,o>^[ARHT::b;dra)Z#NBJ,^_!gl&'IUidC16X%%:R_c/%a8bj*/]niB"4N@9MJi\)`0NbEeMh+Zbm4_RN>0Y5A5R@@>'/<!QL-R
%7L7-siTCo.;'N=l+<!P7d98f6N_E/8f-CV45Wg`)\X;(0`^hjiZp+#P)2!'eeh`))%djA1.te!S0r,K($^`#hG*QJB9JO?D+Js]*
%=b_Yb%*5M+`'$@Nr!#h!Ak&GLU,f57$JB?u71S[QjY-dFfMP=E+_V<9:ap2jYf@l=Ta0d#iN](9[Qn7G$UV:u!T%"D^C9IFKO<"/
%r:1QS;d`CP4U(P/&(iK'a>*47Hb^]0GY>hiBNY^Pe(Y$!TZLOGG'sLtlRB'9^n(US$LC[pFpF9-G(H2f]Hpt;eZ<J`g2-n<d,_A3
%]4MJjFWgFp3\7?4C(P3'S$^YAoVg#9BJBW.b\[m6DI\-"A@Q%k'BDuM43DTU;MNqV8^o/l7j^[c\;+Y+d<pJ]'3I\KD@Tg#_$J8=
%0GPc/,//$3"lq&0bn51Cg]CLfSCdtR*+o"bKNOLiLU\^n76#muTWJEb+NbGS>6MA_K7JH2kP0m\T&hU2re!<tQN@#78X8BK8Ku7N
%F%Pj@GaPB=Zh&q(Knsmr1qjnpRJ@sYYDTE/OI7a5r:/Qi*oRZ<dNr:C#U1jP8eY8j!2i:N#boOCnAcuo<<S+0!79ll#=6rbn?j9!
%L''[B^CblN7*`UG_*!rq*eKg<dPh9BB]h`/)'JZ+klB#D)Wq#Rqi<NS3!\4na:"=7oD]#FY0%1g!-_hNpb%('Gc-7mW]4Cf\@LT'
%Mb+,R5R%V7#`oW:/[VJ?$c0e:>$(bn'c.8&mI73i-0OB.P*Le;44GC50Sd3[+HA44TE0lX,$8`K=$uRXPkHZ&]a/mB,0kJ(pGhn9
%FAG40`+9LD6Hh$;b9?9lJ2G=N$fiI(,VB`RQ#M3t^6?IQSq].F(FRqgL^^>#<_Y?M(:hA78X0^a0W0J<j?3ueQQqY*8I5*SUr;@?
%98^nBPh$DPX;_X:ZNH-)ju*S#UCW4`/feh?=Fk0AF]_BSQ;O#Z12`m-%IKXTWOfc$\S3s0/Wl"q>N'8&Vnm1OGM%OX!)2F.TKNbO
%.G9+(FO<HSO(MB1j6a8MX2`iBL)O\IpW$OA0V!^a%*YUjDA,O;,DsY7_L/j;*j^OGO.0u`4@[_c0WOrqV"R;e5oca-\1NLrN(7>8
%H*\K:EKq[A1@g:t(+b6u&:d..m*\dr%0um"Zr@K<ZJ9h@A3dX:;1oMf$p$<mAC(>k*AZs9W*:Hp1;rXs[-Jofil7P^78\>63o%54
%Me(hXMdqPpr5!5tiT(,hQ#?ET/[nh1_+=*?.::5_^`*8hNZp_X-nGTL,2@fD_at8r=Q#A,@GH[!=Q"k#_BboL/-VO6,'Gf\k`Kf-
%UL&K"61L0[7?Q@^$c<rCbu#`89J[OJ51;'AF2)EIL72_r38\fkHrBSCRQ]HahDkAm`\n@iSrU&5!>didJBsP)kOXCT0jb"U)$HWO
%pqm;\R2.=Z-_)jC0FL5n7<['*]53-W@A&TG'*Lj*i,20NW,Pgl9@"SeJ;Q[NJK23G"'O>e`<Hr$R>+W$EXa9%Z46S<jO4<GG">R$
%'$1s:*kJ)&<ggILIj.!V75ta&BS;^$/k]HX\=E&/V*%#-$OF$=PRenG1X$5[R/rluM"1Wl6SN2DR;SB+^Zqi<UI<nQYoR^Q@9PA[
%V/R%5R"NrsD:GL)Y1mWL)e<(*(5CGFYZ0cCU#2q`!*<hsFjU7oFZLY]\FCQ$Sc.ZIIbFYQ_p,BEk#[bjDp4%1R4pB!MMUr8+c+?-
%*(j3K9#nmXd\7dbdK4;qrbUf):/\4Omn,"V.C;BB_Ml#</ETRcLUn*\NY<k^J&uQcWRo4:cspqqMn'9cOVnGMqo.@q94S3XPCN'X
%(G8$/F:iP8\Kj.V&PsqKJ'f9ma6CJcomc08r(Epe(D>&X:&gI%][[g\b@[?bbe2VAk&[hr&#/ZFACC>aqDa[&ae67;%(\.W6d>EY
%Rr9$[A$^'rI#HRcq.?:r3X3)T!$k]N=Mg`GfFfN3nUo(^"CcapK@&!?3oC!?_Y?0:A2*.Ngfg2^k[Kp*(7MUJ_o2nMqGe?L)Lc#4
%)E]X97eg\NIs_4D#X==<dg1G3,CIr@X)"*3j<=`/rM',<26ch4I2h<-B^/[DY<C\=g&pIr4SC!Ap;$hpnhD4D]L"d"K0K2_Pf-QQ
%^qW,6^u'82=M=bp:nXpge:(N6[)2U;.9P#,6qBDI#SmhmBu@Q]Jpl?\GLhM6b4fPDI9F:27JjBt2d=3@=b%p708kA"9s-t*Q?H]q
%#>H^-X!+!h4oHLDe]!!GFF5LFQgN4-[NuoZE">$N:]R-ipI%1P-Ju'D3[N_p0XceL_!(,!Bb/ji4^`/h\2iQg8.Ub1'ni&cMO]6>
%6jXXo\:%^g5,8n0:B3!ZUdST'5Y)#!&ST+D#)*$Xc;OiTK*R%'@mRO=ATM>T<Jb#&BFe"TYKH7eIuJOmNTf4Q1@G*&ZI*Q3YU<(*
%dc'W^5Io5of[CnIUCA,bZTHE@OD3`03kE'uZV5b`6rnH'98#IIdW>S2"b=UgHa32sjPVt,"jmlHT8ZXVf-Z8K#N6G6K0ci26g&i5
%N?6991I\^V2COi!,"9JW8Hat"%d;i1?+8GJ0*CM/A"r\4.FAi+;a=%XFn#L_;R<sOoNMLKTZu3m<8G[]VL#k))RT=@JEjA4J-tB:
%"Hf2adR43O*Q@J3Ld1DH4t&(J&jt''b.Mg)h[XjIJtr+0*i99ro7R+Fd@%iq"harX(?fjKn-"7]JZ^L(Y9SIIAP/TUdtc<W7",K*
%?YTSd_%2N]EA<_F/@D7n#_^5)F!AA-%-0?fdP926:gnnbK#Q'NX5OB[JPAFUb<ePQIrN'(0,l(r,%AUGDK*87%<GV0:&=fYg<:-V
%`r")?C[l4n38,]l*9(VMg!IWRJ81d#i9-%>EOk)ONQ;/pg_QQ0&`S(d0G?-($S^Y/SDis.($6=`!(F0>KgY?<ft)n@*KQ+e%\-sZ
%>8*$jQ8P$J]@6D=gCbmb*Df]<;Uc8;T&u:A_[#4g0ic1+k*,mcJ/6oIMWbFe-Cn0:ou;Fu"c"1QEs</lV'q_*@#BR-KS"gtiifia
%b:'=D=`Eu6gHiZKZ!Tu:iD30f"s04r54^7Pk#M9%X7Vf]\,=IN6);6&-?&.:=+d`*CJ?,Vn%f7PhWUYf_aAjl@`M1XmT";"cm<V8
%5i-%6r(Pm@<eNu9d^CpGgWpFU'l5RFKQ@Io!6^K`\e*gn[-=XtoLDQIObM/9m4cYZi&7r:>LE@hBhLK\.Oqmd_GKeq5q+MlbdRdL
%fE/Mc*>NNb!-?N?5f^`mJHD\KRNRb1["_gh4!e&f3_UBl0jpbIlN>`CXpYJ:.aUf'<FC@Vo->0U@MKXqp^46KETNKoeS913`3K+D
%Q,".&]2OtB@cR3`nq8R':h6?^"!>B\"kLgB=4R\[<ch;25-,FSaXJ7^OUpeTA.h?CJYfT)V]V_-'lf9\-CnF^GfC.&bV4$DCE^?W
%'p$6L[OrU4^r!]ao?s20OZd<>/WS_PWWuQaL+upf`E'Mr?&!Ik"+U63s1-RCQS)BZF=)NFV<Hp:JG9^B8(s?.dfR?sKU3EZ&/iRh
%EmdsLY+iEu'J2_>F;ch=[:"kKMC#"?O=j2;aOl8\KT,DJ%4`mH;R'=T'_APhSY@_07s*Gg@C4cdV#:a(ltGTj;cRf-Q$b#faQI"%
%JI=aRSkcF-GLt3L5t;,"(3E3:#XJ3&]ETetW_l(K>F6NjQ$+YHM%b+l_o-1[i3O[o;-["]I^d6$DoY;E`2$UWq%FuXZ"JT"JafJ&
%6VfSTRr>hVP(O(I!!H8?5DfFK0!$^YcLrYYO\YN#n\rWmL(Khm-=)a/.'g#&.C%e\8/K(5Uh`!TP4d4b0);+S?=n:FMmC(_dNu('
%<P"Q>.FCR3dbk1_$I5LP=$aE.?_@8F0Np#*`5a:;dj^HdB]m;KDHr</3%!E>6T?`MlOl00J_L7Oa=TAVenqs&_p;\@L>;9ajut.!
%*<Z@'b5F]kC!acfq7.2i(A_F,G\DeY"&RIfe[Tm)EdH)F1)WV(I3oF$-rX)tAZ*p#.nnZ'i;#3q`Q01Ql-3uKr>LP&o9R4*>qf2u
%6qr;p')Wr.T6SmGT/WeFbE!^mSDeo/d-9'nO^f+)a+F?NF"=r[5g=gTVj[H_#SM'NM?oWh^)kdS@:0'*'0:k4TVFa6=85"WW">9Z
%FQ=&3>/1_<6eN,_jGW7&[%KCC:3&eoW";:M-4[t6n#RTbic#J7MeK0@mXkh2T$J"a":#6`L_rAcHeQ:QGbA_1!/SI<rF7P/GGNRk
%'8,l3rW!5@oET!#Kn_cFlR"oR7CL$hq;M6S)1C@$9Rc&b1N?_t$iP,!1H0@p_<irFi(0Gci2u/jDo&W/jL#BA*O!fp=!XnEl1CZE
%\m^?)iJ+p@!0`?;&SXeNN^1pRQJBEcN&3/O#oKd#/;SshVBp+bqTOjg--K(P-k.mdJKD@MLK'&aT)p?&d\d"2Wl&r$$MB8uD&9bu
%\s4s6Tlr.^__fJ\1daF4KHCikRO`*B\0st*?\S8t,Fum^SLB5K+_*tM2*`N5glOD1(.U4$3?(?A%FBqtNTbRD#+^a&G=+Dt0ifY'
%XU*:mmQ8'dMWk:7(kWgg+Gc.;UDVGg(2?@8+6"DaT6:nSGmXX>8"^rV)Ic6`''Y:L0q]2BhSaQW%CE!.-Z82+^Y0lqY$d#03,>XO
%QI)G3>s^YeE=h[:D'EZ%^cBnY`&OpGW6J"H.nj@TE>,E%C`r!qC+^]5.EkoH0O]7L=KjJdOTTGOJKAR!IhjG%hC=,cM-L4<-htV$
%NC$_PoV>#$W"/Fd;!+YYYcIjN@X]4Ofu:T*iL`j_)X/RL\j\k7J5qAY68o/M,iDP1!eci8U-cofn/,L,S>?k5bELg)im?MP-3^LL
%iG)*jXObaK2,>Br;ZL[1YgnO5Y!i\'F"g>o+tuZCY?G95RhN>W9B=h&F/p"[[p$;Tr!5II/:,%^X^jtu?&E<V,1p"Wmn_##.cWHl
%7<_#?G<a.:I87#g3oh_j7e?g6=:)eg(\n.LD7X`,TGqKBI)&a^'<+a&3g&\q,+XPY3>i/EnMDsX_UB)(oS0=IL#E\+ko'u,Dd%-K
%GWn#FT,="-GtZ\@QO#@#IsLs8Vc9^@nQh:CiTJDhr:OrWn!.8Qk]<Fu_7)FjgHR'5[@(1o]2<L`QYY]#[p;)aFhQ(@AebZam<6%T
%9]`9TYI;+kPu':&]?P6c-3!3/`&DeSQV/I5#KrP.@q`5p))(WW>jmMI='k:bW]Qpp-75Z.N$'OY3n*Hn<NC;H&o])<9oGDbXSeW>
%NPB+qKqAZRpc1JQgtacqhRY2/Z,s)sWX3pd6ITD`Vq62dmmitndfj.r]uDr2F0X/oa]Org9^MK,kInIYXE]r*_eVs\9A'$h(n/Z@
%g["Ls8O,Hf3&OOS.`Q"BcH@63eFpWN?m:e"9OIU00rIe/XP%A/<4_05?BPI@(S2C<:&h_-lW-KC>`#iuQ,@fg-fHXX3[*.7idd$K
%?nt9!-^-e_)Yj)QR*$*`qn70lgYjfp9jm1R8ISmGefh6J*4=S]I&PM(A>H"I2Z/lm/pI8;!a_Uq;dM-L]&4(35WHT#q+[V,B4^W6
%edL>'AhsnXArrQ?Pa`s7js?8@dnoJI&^"CdbM`<L?hq*))U&Y%B)9>KK"T6r`c;An-B7-8=>#TpdTA,]jjI7+%Y"&hMWGJU1FKH_
%R^rLH>V[X<5G$&D5J6j_<OqDpFk[jWo,-q8dn`9t!Z:q.H>aLlcXWo;+<9TeWs.r^Xc2:3j>>'!VsFTRP^ArrXk_-[T!d8FRhO"A
%2$p?cVhjY1GY!GOeLA@]Z=Q8lkiH/VFM.%/eaSJ62U/XY5ePA'.^,TtN2QJ$Ibep\r,jkXDM\Dcc[(c0TI?-ZSR5j$e++sn]i"V`
%O1%9hJX'!6I8R.la-C[#9oBaY>%EtM0:9si^"gp1btbb'9JTh)<Mmd.P+9AJh^uV-h2&nGb+&YUCPJQ/&CIRL_b<Y?`f.sU&C`(:
%j*qBfptsSLN'kA2m-Z1CE39,R@2t3%\gRE1\TE-1)q::"%;qQlR/&mr`H-1M?&i&UJ-9KCH;sH#Sdm;._p7DPQ@oK[[WtCF>1Z]k
%X<bA6MU*+MCta&CEAkpW@,YbT-Iutg_fBU)+>o3LZ.uL)Y8U_+M6?fTNT3,*_)KL.h?6BH3MH=VqpIi'cDA"6*'k?]5(;fGdSi?o
%.A*=#YXLV7@jKuDf$g(EoP;I1RdTTHhY6?H[cdTB_+%^Vho6kq\&#?VmXrN7[IfVQ,UbY.=E@>7AL6;Dee_`r*p+fVXOc[u,Y&^6
%0s'1)gT<!@mU%:p;DT/E//F0r!dH$%O_!%ZCQWN79>PCU_/!m2cB9d]AhCl`a-&-=Sq9[TN;q/GAEMKi!f(dhf6S(5G@!BG-&E-s
%V[k1HE%3kr5_7iFI6bWN:!omq3qD&O4U"(+j7!!gRksr>7a;[Gea/dN"AI%!l#[ST538ujc)+Q,p?Gs1=aWG9AQo!P-.jBR3IcZ]
%VJL)V[8*c/Y':DZg"e<jk0i<Ib0XCFXgYcrFFn]S.%/;p7i(t]R:5rZ`;^,Nc8%0#^8YCk-P%P4@bt!CH+Y#>IiM#'2SLJ8XI3E9
%$0'@c?QBH?Ql?PgamHeA_BV]cD7*Xp4H+AZX4NQ+fVqYbNYCVlf2(B>q:"At>lUl&F-IIS?[1CI45n?B-)WXQ$.u4(H.!0U28]]?
%dInMN<XBM1Ra7O43mR9G?V.Q<]\KkrC&6'WfN#(RHB$dKh0GD5\aZuYC3pYk-K(t/X`\DD'(H\PSJG95bcArkd.o2$@PWH'o$_'R
%?>FlK"?4Y+b4WokTB%%!WT[;+MfQ/T8@4%NJ(FrAi5'5FG'Xd4-3CQs,+M%m_Sj*`0@H%4Z]q(VZqP(\XY7O_PU&rH9ep=Shg:aO
%6#5^f'Z"""(?O,E."Q.o-YH<U4'$"fc_=ASi@IS6-K`<mVIrcSZR@V=EYeO'$Mt@(77dXN1N."Ei@IS6-KZnJ1[esR&h2DUYDu%2
%MiraM\aeTij=JG9m*a,<R@6MOmKTUEc+0A5LZ]sEL6p3(r&o%0IO='`NaeG%=K(C!]";SYH@Eof/Z65Cd=*B5QHdU:IMV>0f]c=H
%;I')h\7VVJQ9YR%Y,/Xoin@Yq>-SO$e6P`'[985A&!\t?[1q//L2*]oQ9&e1WhlZ&.&\K]#bBfBB)OiD>65E7V`"P(AT[NTA>RHt
%JI'\8PV/a1ATV&OgT)FIb<O;gi?l?ir@L.\H%q!80bU"gjC:>FFS&H\4/_l*p)<qOS,_[=i@PH4i"MF;;&aTGjHBan@L1/]9i]:h
%"+Da<pt:>HnGc5X,-sPt]$i%%bgDVO-<[JHIk43iKb$Y@bhbR4/BUqZW\pj67BJTH<REP%eagl=66`Ltb"aeq\]GLlB$E2:X;;VC
%-[R$2XG8:IfU/.<r+Z"9[P8o`WgWP!J)f@[ftXH?Dm]EPfZf%TK(n!F%3CJXUcI<Gb6QKRQRIq<CNM^S5=V4S/2Xc52$"5_NWI+D
%ct8c&,fk*k7Gpe49;D9@n\F8jI-8F/-?f%Eau96ra88RY^"]]4Y8U_+M$rpI2Nm[A&TL17:%.^In+<*+rSL%g0P%cpS*p<RqnF@\
%Sok#,<l1HIg&E?<_&Zo`fh@2Nl(2h)kBm)2/cM@1msZ!@]'&r0SGdQUG?,>\l(7>LT.\sk:%s#OIF#B+]=@&NH&KbfYQ)P2bRF\#
%Gc"`Df=h6Oof23rp1)(>`Rdnh?MFJgbZqi)H.@TMCDD6.CBF5+.nhN7:TB(>k:K_\L:Iq40^gq^h/Y<n)B5W;cn<S33Ckr:1S,ao
%OE\Sp:kjpuJ^)BHk;>37SanZ^k,hqcRm1Y:h<Sse^$;KP/iQ;g8YrDm1j/M]'2&WOO>MHQk0O%Sq#@u%1M/#e%4V=\f'%6H]a$0u
%N.R5AdPWf]4'is,8slT?b"ark;lGg_^5"s5e[$\.*[g:\7%R&Z?]^LLVr^poh.SImR<l<?fp3n%#n<d(#(cYZQ'n4(1"tXE/TALD
%`*cPUHHu2^h!6O>bL4=%RWqC;0+4Cs&SW#PGS+'qb.ja/QSe5q-=5-=9:C)s'/+EhGc?bG9?bl<Kf">p/t(TSOCJmJc#j6T7]D`B
%:F%OG*OUfn(eYr/0oJT,#S3Cq_S`H>Ca'/rZi71c,S/+donQ6mg7'aYT?EdR]3)7Z&'MAC8b[KeMWmJT;WB`b:nDgiQp-@@2N2-d
%!1nJJGf'f3DJWhZ"K)3lELb)Jp)>DrqXgWVktBK';g8!&po7Tls%6Y3o1pF@1lo`M?b@n=DL@$=%mWd+B:n2C8arIql6t/=S^I:\
%H9.@FLBMO"V*_N%lt7BQr/6Jnf>Z:ep8SEBq4D'J1tVX+nb?IM!WL4-/nQdkCGYQ$[mB.h;UPhf*[3G<.1[b@k`qM$jA8rt=r*1`
%8_Ej><_[\A:6_4`1Mb3*^e>AjE/O'k1+&/DKN%LJUHD$B#jF1,0o(n,K&n`21ljB?%^<VHH&O"2Uj7oeNHEW3`k5F-1ljAl0V7D]
%dQGO>j=r>Tl]r2)G"L`#7>T8Bg>tr9>^tkeP+9k\od1"mCjmib<GqUhcZGOVKFCEb-KZXW<jE#Qc#[4ZGbqkC^#q7'8YVZfo$cSM
%a^^U)]uC(<`K*CtaH-d*MlES'goY]LUGC?(,R9VsWRV[P(+VPGYeO!F)H*jIhCm:LP8Gp%H<`#Zj,t2>Bh:mXs.\m>P,o?I2EaT)
%T,TUGcOEM+9;IUX)T#YRfV%,mr40pZK76n]kG6]nn'ti`b\'g-;1LUk;<jl=oH\iIaDY=g$^E,Ob$lCd9#T#F*;E.Cb)@G:9#AI3
%+81Rco\$1Tqr]E!R;ODu&5m_8>;gES$-:I[V6Q<)c!r+\Cm:g%"`ODdNLe(0^Anj[1m^[QBf)/GF0i_Y)U6M>$Zd'--1E&+BPnEV
%\HP):[W(bAJgX"2BfMH0ZS\1F_mqUo9>e:sS4gc1./kq:/"B8NcCBQ/CMX"Q\n"LYIRn\Jqpil53=3!gn_>>,F,Ta(M1g(bcarNs
%fQ/>O`,4a[-.:sdVU*:fUut?$!">b9aI$\o\u:7nb28r+EF(;"XuA/,jL<9s>5.2LU0MB0qm2k>9.e:\9,A8U/:-I1<'ie2D&JU8
%n`Fj,,uq&BYW=^khTa8W3BQk``;G4grdW+cV?uLd-)>/_h\O/0:B&P_=iZ'2SBT6p:N66.dq`<T/)G9BSBTZF'qZ7KIpFA3A$mrG
%3kmSuQ&rQBY:qR-'#0bcl*SE%cS/F0$0M1uVct5<lGQe.Uq]AcRl"p3J8#<*C\`If7PE0O=]f]JP>+\a&Y9GC-@"U5=,4O'Ar*:h
%;g+c?2-Mb^a`a"PJ*0(1%IXVq9te(d7WgY8dqe4Rc+ZUU-M.KhFg0$<pe-.N_.\aV\,<+I,6jnmrrGVJFc'eL.8##_e0g\IOCNi=
%F6s[tn@e?JmMdb33T\6Pp!RCF/0[@]K5j%h:L'J$/2Ss'9#AKEa2c,Cct8c&,f"Oc7GLKHoj!P-'B=X<gQjD9q:=W=5dPAFla?.h
%\Mc4+S4B>VDV)I$%56-+1/d-lMkE2u`\@cJcan*i_S`Goa!A5Qlc(Y>!7/;`]O:r5g;_W#cE(lQ`sd"bZGB[dH@?CGcd.":eksYf
%7P*IRHku%MiY*E#16:RIOWQBK^+M!c0[V_SW)8<3&j4cR/hif,'QFTZ'N-9!9-9@2@Sh"bE.6r/edg3tN&fEGa7o;Tbuaf&f%OrX
%`+"!^$[VDHqM^Bd?:8Ren;rU:"?uV)5:,@aAXTF4c9_;gM-40Z2t1Su;Uso;ZNN)QaOJ=@4io]I@5j*hE&2'pGt=%M8T5X-gajM4
%j;m'U6_,.H>?aPb0"cA,et-@MA(G8%><Yh<]5s+*<&4i$r5A*ZV!5p%kp`B!WRn3kbpA<"P*0CYN07=c2;:^QCt`XD(*Cb@;`u*e
%+V*B"I*sW+3u:KFUbIE^Il"9?k+/juh[;1UM%@n^mrLV?e45u(&EBZ5Df37[7QCEi!N&@<J'S_Mh_]p(^'*\O]??GF@^?ue%#JX%
%P0RD0bsQ/uSeeUYkW/+;es*rFo8cs)qTe6\*S,T,qgdO6!X!JDrjeB;[<nIFb^R**^@^-IK6A!L39eTps#+5ef5$`.!fE^"^0b6n
%(n"D`Rjln2h=]l'<X]"`*?W(8?tR?5E6Q^sQK`XU!>cdXEp,`-h>V(.rghg3*odpK40[RJ2Z:CZoG9-k-,0;KqsE,;r+<ECc[8p%
%<#Fu"A^H]DTGN!<!X/Jk_HQ8YrOlf#H;2sgri04=ApBH$:c@BL?'JJ4?L>7,Y$=c$Q7I/oPusTcJ*i6!Us^@XK=32@g4uK>SDQL#
%.R%NGQ+l>`"cq)WX`m#0r'ST=J5>'Qp/cttRJk@McUt)2-[^2m?c)iDfKLpY$nTCEWNC,F60Gb^1@'_WG'>?AH,!MLe[hMX)IFAm
%SKPtXr'SjO-u3GZ9ued`n<sS^nZWjHpi`GG[PV/7j*B_/N5m)j]<P&)OZ6V"Xk.oj0)8"?mr--K^5S_@(F\m<<.FkBeu^;rN_h^k
%T^EuU0sBEo7P+J+Ekm%0VD)nlP1G[V=B%p&s+g@Hlqk?#aUqA+lo"?_X60)_!e"&H7dY\35`XQC)n$?AgO?Wep!/T?eQQ+7LBZS_
%Gb1Omb*BbPN&pJ]l2WF)M5lI7[/enXRWuDDIh)_OZL*LR1.CHnj3RnS+fZFGjPA0DDe!olhfmM9PHCE]h.p&@AHf/6$i`KB,o)K0
%(ou[nVtd`&l/?%FQbg9=qqub/fn?'feG[/'XJM;S@e*3%EhoUcTNl1-XirL_qEJ2e[>'=>gd"b:mM!J=B98an`p6nJ.6!=ul^,n.
%V;@4mhj<8@F,8"C7Y"V9MA@Cj'`MW=.HEOn2llt$/3<jDFpVKgpVX'3"s=kfQq,e,-L\E0]fQ2?@H_JOWHs<Qcj%tSl\q82Iu(qM
%.O]b;.Kb.EeY&;*01R\S=:7]SA;,s*U=5)RR;^>f.r\7:"&uH]DQnrr-1p<'P;O%Y1N`EMR*=&"^?2_UAa1%[?jo9U![K&lm,&7"
%lL0Ci0l3XL`pGASIrfVb=P\&]30?jPR[BJBAhFZ\+\p*l0Z^>iW[:K)An2WFd5!8R>)"=aiP0H#fN'X!b6s(mA#]4;s8C1.QTNh!
%d"%?C^dQ>Z,t(0;7S6/aCr^HkNmo8sR*rm[VN\`pjOsODWo!f"(Xa2_nOOQoVmc#Z*Pks>5QA:=P(N+O(m2jB8.+3gQC.b5s7"`N
%C6-QA<NbkrGYKf7jgY91_roD3<Qjdq=PR3HZn%p3DDS?J"/.[>&&!`l=&q2#E7M:pD//Q)>M%5'=7EEZ?_+f(O?6#'G:<H:m;qb+
%gihcd7es]?GniI+IRXop)TXdb?ZBIZO!lu6N=T'OQhl^/M\@^N[s8k(jCIH3r7_f3_+$oN"jKa#D-buu"XRCd_]*4-\:K7QgJB"*
%J.E"b?PO_DA"'54pd$hQa3M>=8$-T\"'c%YX+3pQI50$a/bVN5e#Jaaniu/=.[3hGHC`@9Ea-*]6P5\cW5/nYX;8Ga/A'1nr7eIH
%^t66hT_:Y*I=9-SV&>1MB_45C=Q.='Q=5oIq!gQ3bBX%cb'Y[A_d;8;"fd%&e<l6Lb8agLk6g,Xh,4ZgD5O:9\j=M,Z#'BJk^VU!
%k1iD#CFlOc^48&ZpD`&&lrg5'Se/fiq8[G.jB;-'rrih'_gq>#jdC_NPe.j*F(1TEbWR9WELN'@1rHTGTi/4_$K4k//&Y`%`meA<
%7/_#rEMhn#be+u*SU7dr@I5XZ)ZLbmm73h9HhHf>3LW+62-TZ$RN7eL3oW^@7E+3(ZlIQGk_#V0.`F<ie,pa^R_b[;ZQMh*&(-AV
%5\ENDc)Pk`FRkRC_fFT!G!4-jiHb!607>s7qQt)@UAVYt&pX.8P[+-E5Q<^E%$T,f.D5j]I%=5?A^WMnr;T@-UF/ZG#C^\hPd(#/
%r,1AKWBi>aFJ'dW2^/`MY^m4bW.olJ!$V));l!G,`kZUF.ZQs(6mIJtB^3JA^=b7$4da(<.Z!Z_rPq0X*,upI.!](_BMa]a8H.T,
%Br:AQO+0(5rAlk0s5\7kIFM+W#h]pi9!89b=t"S\p(,I"!s2p4rY`>k!sm=,+@EjaI7"/P%WA?A\!jk(?:NcHnDJ-LSLY5rQ6%qG
%B0XQ+cK<("<hM-q1%@0KE&=-\T5uZcVVdnkEt=M9qitr8i_)^S,XKi.R:,NseuZ`=-U1iNb(@nYHehcA9`dfGijYm$^FkbU2[;K*
%9.#N7hY3ORAL*].W@Pj16"/eDE`g,_Z_?m0B;O5EqMcAC^Yc&c)kAb\ctGdT*@BCfIq.:S:OXYK^HJ1->0<Co^LfaGk5`UcoibpH
%@,*T0XM^P^O#`Bj.kf!P\7m3Sd@%dg!uTO)8"7TX?a]1[=4Yhc7*1j)DbY?sr+)#ES+sX)5)<?MbHRP=jZoV+M6Dbs+Jr$6S.WKP
%ZT9?,3VU/DC@$3^h1Kn<Eq3-/BJ>((B#^ko\E"/aaC4Ld2V\YDFu(k5L=\"Y_;DhX_)T1lR!Vhq1eFKa;J@>/)dBkak>b@qhb&k5
%\%oSe%da:?]dC2f\lZ&d\j%utr2umk)SoZTk(4ECg6l!rlZhe=?H3$([9K"&l:e-RWRk=AMN:O"hjLos#to\E'u/A&f:$$C6edru
%LpsXc]ADFr)"@Hni&"KA?1)gJp=^#fn%6i7Qg84/R0U2uWik'=JBI9I\R05U@I/+bXCgtIi+CESm4_[N)MVj_0$7Yjault'0Y*V;
%VI-k<5,#(8CQ0uOlhJ9!QT<*>J$>USZAq[$i[FN6c;j"_`)6CRAYLtN*n9P1qk+JF1aQ2aT\"%s&11@S-!'8*nlE;\DgR)0f;b66
%E6!/(\O7X3..-Usa!WbqQ";ZV*X8Wm!fE3k<bpO^GmtQZ:c_cD:ccg;64hR\AbO9kb?k"mb8gA\E/"QjRhd%ND3_0Prcr>,h%t'7
%Vr`."Bs:cn2.6[JY-r)u^/YXO[j.\fG;F-?l\EsP%;M#hBpDo,8ij@LY?mOWP`:o?:r(Rs/M%Tl-=:Zi.!L]H^6UtNHdu<'+_f26
%$0Hua[1ocLR\"Cdb"N[rW1SiO)db%P>PpRUB4m$J`P9"s0TIT/KT:)Sn.O3V8lgE'hR0t"lIG4:i8-d60R3A9..3]%/K&`l?W)+=
%f7W$QgabAXlHdXZk^(RYPj?D?LC+Ia+i;Y]).%[!&1]8\ItA7hG!0r33HA`m@>6/kG3V76kE4B]eN8nRCuX'oQ=V.B"'_5!`TLd#
%IUl81[3jQ7n_gO&R\OI[_oHJL]\'3&*Xu%S(oF'q@?U!_Q0#&Yr@KrJ\X;?3+Y,4['5TLlRoKKsA&4G^_M;l:gbu?)+>cnFaU0L=
%*[_^+00Mc;K7shh\NPrjB3A]V>]Ptsni)jPYEhFeZCs*!J2s_0mF;4G0"c-4g`5;YZtd*qPYoCp,,^.fl.eS>LS]s"MrCdo1B#HC
%=I@UTH5*N`J+M!me4@,V%kKum?DN#P2=R;?\.]c80XTq"31fMtkL7n``Xeeb?#-!`.U>gu(CYKH(^"Z=N"\l+\lQ+6-,0IHl\0i&
%gV!#3&u&,6FQa.SrEthEL!gi'a]WBU%8cK-r:VubQ,.#CYF3m1]3320'`=`+7oBh3p_9C,;cO_qg8no\YjGeR':q.]Mt\jRONCc6
%P.J&Z>,4g2YR(aC9lGq?pjY/HidF'o__`pC]C1A^IKfXq;$/Iec"_j1pc*\T>_$IoU*9d\?ZC+F1nl1N8VhMu=fM/"b<s$NWrtTN
%M7AcSS<2"2WHKe/n/Albje)0m#p(Rp`WQ<2;Vc0iQFQ,9,UDT<VKAVQa*6:9%YO_?<MoPaLFp0WK:XXPKMf0AG/QANPLpn92+^-U
%S&#8SmE$?=@Eh4Y%IWi+?(R2%@Kc8?<X0f9NDO"J'%R>b9:DFha+@-YjprN!`.jjoECr1bA(V/%ba2NrpoVXjbfGNlkYJ"!5NmQt
%jGnTMVu_@RH\;aU+,LE,&gk',%u]N>VW3eY4onEq7*)kF^d+q8VB&WGgj6r9Nc.?MNlBE["s+ZPZ*j\@!?@)_X'Xi!=g$;=^jEo`
%^s(1eN%)Of*em&-A6*6q51.+,b3]KtE'stZeYF=;A$aA/V\],i2tAL4E(g&i[J.l&Yf1c*&t4dS'T?@;J/"p<q:hA4=!C*ZjcEl4
%DBp)UcR8*`"$&C7'$g.n=:b%U'9,R'KDd50BM@/W*66K!XIq;_FhB'k(#ZM&*jl<N6'1Wdi0\Y4gkEf`!fR75#4`7K>WTCsJBe.f
%B"D&MVTR5RAcORuUH=mYY.SAD;uV=l/iPQlj3(CtJ9_?Y=f0uj0DV_BcqB`Tc=R%uZ!mF`iUpXhs7CZ+(7:a'(j:t0"W@S`oFc'[
%WASt7N+>4T1XL-o5SGIge+Ku>MO1;>Ei5G,Q[-9:R*u8\"h<P%7&O+s_?'*`6"=\sc)<ARZfhq^]a(>+0;8Kt3gj=G)UG?p8,EV/
%>,\fD/NIH,(?c'<#*D*KKAIW-c228?1b-7,=r[<&P"7CW=o2Wt@9i(tqA)#CVpI&?L%8Z'rj5+D1A&(Z*jWP">lN^L_Z4G%:i9Y8
%0.2PP1+',D1Ybfq'FYM9BWI>N_4sQ=gVAOOnH-).>&X2dEV&dG/*jYorg4>F?Nkfh3^"DR2$bs6.`%4>2tY54L[<+?<OqD&a*Llb
%Wm3's46&r@g0&kmDTo&`OFWH9Xm6hOh4OX7j[0flcE`HnWatJ+aV*efW.$UFr\IJdK5.ea-na(e`o)?Noh,6L7[L]TA>c@?m7L*s
%$T5t/V+SFlNU,>\0t"&b^O;Lj5B'IJ3,6QiCC1iPVZqpY9e?'Lh!h:BX$/F8i.WZ*c<-2qU$a3+\ol]9c?@'oO2_kpQS<AhTh7Cg
%UPDWQ]@u[`bKZnK55@Uc-E`b/6_<P=]FUTZ2,cQg3H?u)o4_q5p`RIR;n(?-%968IHE@$@Qu6G=4MVBlcLB];K<-rN$([`j1D/uR
%]phO@:iV*PPLM42c,uD/#fn"lm`%7d#]%kFK+Z1K?:0o2^.d"fUq:uoL"a=D4J32Qh8t0l^&GH@p&+K2+5ApG7V6h2`cSfb!+f@s
%*Z1r4=Bq)+:<Ii[fiAh&ZJJ8=MH4k/X*bpU-&3Ej^s<q]Lg]MB&3S-*=qG#M)m37!2p-g%D$e2%>9.&L>^#b[fFVE&eU3Mpkq=u;
%0;(r:WOtkfCc-uP&a/0+e^udZU^RfE$^Nm;[;J?Tf7mJ.$KZuQG`Z<<s&_,5Jj$"n#fhS3ho=K`nq=Li94!,j'KuMT2Nih2UCH*_
%CEoo,N3Zc-,quBoi&F(pp;Cb+?MO:A_@7$X&SZj:P_FDJi_q6P9I6=Kp;!9]LsVZ\L/j5,7A!L8S2]5UX$n3-aDu.^VUUIr(F,[G
%.&A^>.RJ1dlR<#SP=nDjOe?YTmds4'IQha5Momt4%dt?^K$rJ[$,61*+G:2u4t2X3m"$*\&Qk&&3lo4s3Sd<fkL^LhQ1Xln>K>Lq
%p_"HUnuMFaqnd93"W@`R_Na*5"?Y9&p;"ff^&\=)0*`<@Lq&Bgie5*0.`f*OP3[Y"O9pfb'JdD%liqUnD.UnJ+&@1@T4\W^S^GPM
%.>g[tpX1EX;+Gjl[H;VF"!1^DIF8$X7[ToT"cQZpO+H-LFU%:SNbsU8C;FlEj8A>JD%pAK<I/i("9$oh_iH<PVb\@NQJ\gYclO70
%jgNo*NN8&^k+*<b40)#8o!NMHF5MB:]P-0VfRC0uFC0O+Z1mM1rcYnTYt@H-hgW@_rLTa*$Ju2WX31D.bqIbjgKU_\c?ABI\dmP4
%DslFq#GkaKF-k3[mqm"-hJp:'jCtHPbs&]Yk\IBu*]gY8V$@sjLRi>AgZP++@;XP3pj4$*pUGRXo$k>(.i%^RVn$a=8#O^.iBhg0
%5.%`pQ?-KJIJr]"H]l^h*Smc$DWC?^eog6Kp-pFa==L=8k`qHWWYa"kafG(,m%@Fipj?i<lJ(uU)]-&cDZ7fT^g[rPqQNe)Hf)<A
%Sio-r%De]!q(J(AI/*@'HXXCpHRH:7J%P.jYMF!b6+e^LHdIcDD/#hEX;J.-nlP\@k*Gm0Hao5c[JG#W49+M=.IZpN5CNFghUQ57
%;SL.H[?]ajhA,LJ.I1QG?+^,ZU\<e<2-5:sm*T!`j\sL]4+?rF)-GbPHuYuK2s08WceE?Dnu/haA:J[VC4(>*Z`NiFL$#fo]56ST
%K8!$#$84GY6#tO$cT9U@l:*A??A;$`qbNO/<kVbo3c&aVhX<V[cL5Z,4"[Tr#!V[QYkuh\pXI@_?WOVl<^1K#kP%/=]2+n,J>K1+
%j*Na;+3daUFV@4:1j?WLXpG8[>MW61kBm)[p%$\Od[cX6D=#9\0>:75<!9d0cL:2doZ,,'d['[8F]s17bNDrb?[6GPHZ^,]pmn_]
%oP&;F/NgXm+rWLjZF*j6p?E%1AiO75miZ6Gh*@spMf8roUEQk<-V%:]dtq\laVE)lg]anQ9K,2'h^\%ciS-u`@f>E_@_)F#Ia1'*
%o@c3PnEu9_OO"p_/rj`)\%dFL\:ea?qYQI40$k,@ogA8.Xh;pCn(`OniS3U"^@ofVhn3Vb\1H_p*]&o:e$#'[<;!!rmGmYpQgV]H
%j-QUZEqL`F:*=>d"Af95XmGA=B5buN3D3.B]=bh&d_4t<]]f%nRHkNh,`,nahR2eT9c_+Y3lp@1&rId2%kcD9>L*XKl-m(1HEd'b
%X&K'>H+^_Oo:7Q5o+`(E4Lr:=E:nL"e`i3dO;h>%0D9SEZPSSmAo"6Nq6dSOnM9D[>:1NBjniDnpdjBW0mcEN='Bq&>0^KC8(Y_F
%]kf.G=',^rI0,nu@MKW#)cg&#+Y\+Y3Ic<Slr]aB2b1%D5s=V-LVr<J\$<sAmM+8Rc^eLni`pg`o?`JDZ<pl<Y^,LJEdR8YLQ.XX
%9'(6Q>8OMgMQ3E=kkg"tdlf66+4`AD"lk6HnoX%F5#3A3%JZr.P_oX^b*d#MD[Ccrm.oC9lF!kq[IlNRX]oZ'lHQfPHZJfI5.'j#
%-#B5S>kMI'V2&j;8,)6,l4I"mr%Mcdls0q]>V98DH>^TEr@8A7`OG<-#D`jQ]_m/OQ*r?<]L0@3=ub-;:>Ii>.\1gpL[NR3a1D5O
%^:$Jo(>/lX-7[rg:ptDr9<DB3CPOK5;#fM<EEO%bfG4e)R<%.7/j9#Z)HiZGDc*3p]%//9coW9s@"2J8h!J>HITPqT3S(6\FH=2N
%aGXsWpZqP(o6_=2I!lBIYkKil54m.Uj5,V6I7o8+dt#m!DHA_;ngTb=lMCC[B*\70A\BYP;dOQ1DC[B,)FaF$bpb;Ke`EE0]RSqV
%Vftpf<o0-VlnV'gYT(,d=k%i0FI<YSIY1G>c69A:WWt]VL3RL9&sR`d"J<CCGS*f_-+XBfLo'0eW1-8M^C=oP@>u)TeUeVJ*tsZp
%>(Jt92k3f]&r3lb46ABI)Y$8P@.estKnJg^F`0oD#MS4nI!d8@J'gF3Jl6NY_68p&/5>DZl-"5maK='W&@b7q4F.aLo#6TAMqu<a
%C\[haF>E]),3hY2ZP1CfL+:>qHl@ej-4sQ:qNEE=W=O/83/CGe,afG-JU\#q']6q07,=NH)5/*]FQ:904diKE?O#U\?Vi]!jMfdu
%@0@4*\AlBQj[ok(E@k]<$*Bh>W$FD4gP?A1>-4=RO&'9!@XGc>G>J%GM5Dgf[9S+3,VK\F(q*tnb/A&)%V/S9^:oH7_#cP1pI(i$
%WP@K;8X^F?IT20-a34BF;F[)j_(ZZDX_I-MffTO(&PL1NkOm6#\52nP4aHq1=k\>cSNn06U!!)HELU?!0DA(GpYTnRmQAdh=]<!)
%%6O%Zf'\/T;n1[J^%^YE?i+lP?*%:\J&lJrjC9%__pRG'm#.s8;RhA,>!1f<Tb]94QCi/hn8NUI;e5N0nX+?8qsC.)-\'Z.qG;G4
%np=,D.<jpb8'Soep@4LC3BFYBm08JmZU1A)`[dm7[^Gh:jS+/9IWtT4"KHBE`QIJfHHobqf;-cVjj#LehW*VeaQ4TNl:'$UA0\an
%:\K>Rh8u5l`31!X48"bd_;2PN#2\T@D9ZGF5PjI#^sIW6?f(SI/&=l1aFtV4?OU6R6nX$P(b4eh1<0L_=G6V63f7>3HFEcWbeonT
%f>;BNpEE*KDBu6\WJ(^B.,GFXY32Da06?8#k[F9LpNl_sj4rr*T=a/6.kc(52+1DaW']5<e9mZ9m!c:`OlS4c5iIPKE1>1U\+REJ
%pYa:h:jZ<A>XtQON/BX*8=u@5j)?%*jQbmh7u@bKRj^B9*3+3ZfXZIh_)cqVL$=X*Hs5q*[-jMIcH<$`.c0UML_saiOT:jkpUIrN
%!nAs=Zc^\%"*OLc*Ckdh-]^EPf<mdc3M:i2^6cV2FCt\FI!-:(^um7&S4+.5?14s^TQ5:NLC7Yqj+]4tC\>f?k_i:#Q&TORY2E9m
%Ldfa(Y-_4,PRUj%8mabH^/ldBHal2g#>W2!qR(X!rM+40p0Qfd+)W1#bO6CR`)(gL+1SL]*P]RT4S[q.RjQ)?5?+`MhYEkNf?2Zg
%3X9!'YNoSAp@Wmh>sgQEAsTm[mAi2B`r>3Yl=!V:[eUX?^q=^HjEIH?%pHO,3PCbXf]nsOS_-&Pr8Kc,0A"&o:A"#.R`hJ6ip(^a
%mYg8)a31ME5h@Ff5c`E^R&cu[l"p1@(%SAADk2AlDP+XLH+7k%Ea/]^k^4UtQ`tcYea\$hn=omVX3e4>]t%'hb);!)3S%B>AZV?g
%6SaL_Z^J1`[4"g2IMkd'_.=&&U48</F_W8"+4`W-;c3IamqX[E2F)$Ooc5aK_(sTo:B"gqMJP!Dc7;;6jnFO9pZ6a&j`C7Yjf<-i
%g2L'p'jS<XiVYL.OFM_?)lGRncI4=?)";@rkn@REqteYQU3_9uSuZLb(c6Qo,[U\ciI/Fd@t-,&I<k;oL4=J]qg7bS;J<qM6L=j`
%2X`j1@5tl4K.`)FlQ9k]c\Crd,DGp0K^W3@"(e%k[uTMBS/8TA[%^Y"Ec?I3*m5m>cc'q0ZD)_eod/cY5iJ]er<(H^G&M`nfpdbN
%h+$dAc?T4=lb7gqGj-9?XH[\[4P9IGjfVao/NYZA^cYaQm!d`:N#p%P'`kDm3Z^2,qrH`7j3lVoL[PTe+L58.^;!irZ*_/3/l.-%
%jBc(T\-C2smVZ@d5JA&aWt&b7W)HrHCgP3V%d0m8QM[udp3sIiG.e.0I!Nd!mZfISbS_e][Ff\amO5[hGIBmYTuj.Dmf'\RMiHGc
%fDFLlXh(@Gqra#q0c)?QX?\_6TDahC`g(lIfQpQN4Qn<$l$Z^KVS(['X38akERk*)!%&0;*ZLs%4,r[g7p,1`#W;drFKYeTAcIY"
%2p]]l48DtR\'Omb7-o?/msG8)qYLlKo_*LND%o\n=ci,%538(':PR(\()H1.dsP'ird:bCh_QG]=\RnCHZof5a'\dmmI#B)oNOP!
%Rnn8,@>[HoK=Z9b='EoK`B&&N2Ms/s2fgS(/JhpO>2!kt3B]doD:eVhI9!dr^9/8:Ghn.','CW-+.[p8nE%@L?QD6uTuC"YoV1Qq
%:XSZ?=O2.:<I+GZe:q[oF6s`=>g#,OJ+B[[n[a?BR\PTSn+1n&]_hN1Pi'2;H@Gl#gNB([CNk"8p[P`[[jSfLdT3%l%0pkJhVIRY
%;t"b]DRIe=PrYY0U:U8ijpQ:qn1#ljh#E;AZF*WgDlc(/G+PJBq>OgoI5kFLTOtH].K7ql,MsP[^V)Vk8W>ql?h=]YU[$S,`iF%0
%P33=i:<^>HAmT<0K^8?DX5[/JXo\5M2?f0,lW;r0YCX2H?'`S'K3mO4QVOH_H<r(=/`2'I"uPoLpKZb:WA1>.YO@'']Db&*e0\B$
%d*j(e%sP<c\2\1i4K)LAUntTUq>>Bu60Z\<mIn4Hh84m'c486+#OL[912[T8/*/FUC!e[CiZ%M,/54rAf;j#nh7&iI)V8&ESYlu\
%n2hVRB5T5<5BObc2bQfUePclA59X4C.sP9*0TbM#6nr/\9r'pY>.0Fajs`8_45\fqQI?rpIs/N=osAj;?Bg"b"J;^[Os$%8l3HqF
%)nkGRCG0$>A?[65:am=JQ]cYMe4ACIm59e:UBt50AXA1nl]Gs'n!@E'hB0>CHa,E%)j(%lHW1qWi)D.l)uD-(f[c7AG7lL\R.cHK
%)79I]]Y2aIja>Ku(%k_o25o)-V-&$#2@A3b>Mk(MX$/Rj-J,,cpY0iEILKJAPp\4K]T<7!B'=<=DJe:/84.3LR^b.^4mjJ8*,Vc_
%CpcW:j]oe(o494LYID7>`VG[o8Z)EuGckjGP5TaTUrgAjlX^V$2"'=7O5_5VHelR(_=q^&5[F-$@E7^DFn;h>\SHYK8EWa[<4%^X
%pNn%?T-*Gt35'UbGk_iEqep*-+q=&Lp&Vpd=dj<rArNLiH!4H5GdIN-r3A5`gs^[RO"]rhf;7i<Y+_>hpXAN3H>-N*d/.$/*k_Pn
%/Uu*].QUqY^oTZcHuL:&7-I%ASh.Q]IZG)bX7b2[N@j,T#,Oq)olUoJe#[Ilmk0O$^!l6*7f$;&l,DB24F>Q@CjI$2)o2-oZJ>-%
%mgX:j$)*tk]Jt$,>l20V.9Qq.h[cp6cbTq[Q-G5YfBrlQs)DIQWY+YRPNH8=j#_=B_&5HiQ*r>3foLJ-e]DQB;IiIa^aNV5FQc[-
%-Y7)N4^Qs!\[d+CN-.KK>-.AaT"4Pup+Eq6AtP6;I;4'grOQ/ihnJpaf!_13TBECA<psK'G'A<![J$Hdo&\HYE8S4@)Z"0Eo#'J\
%k3"\]O]nqi'Qs(q"[N+*243?\Q?uRi:1KAjI^e-9IWr9jnq@;%IkTClL9A?9JAVoKa]Yg(BtNDPq'Ukh_n<UhgA=i*T728pKJ;Z\
%pX3*A,*Xk$WXu$/GS6Cp&M_>b_j)V(f%gBJ7Y$VKc<J=hIg]QTf)77;;+>Z&>-4<2W9)'T\b[4+fm3>N>nc@tRu?ie]Z@-,kIo<q
%cb1hk_=<>5VmY[PM,'6X:Ui`Pjl\F?Z+bAgZi=XZD4Y*X6C`rkq*f.^<KtdG`7fVIIdNICaRK-1J@O4EkZa`pVs_YGlQd+8F1qNh
%&"%:*`mUA*l*%!mZW]uA<OQ5AUdQ]S/,*`CV!tn&?J/M1s"`ckX1R$@_]!P_X#BU67S,h3+Q</3_8j\ugk1s>ESpH[4\A&#NTp+A
%YSH$8c17k6%7AqDijT/hU>sj_?f#)%!UNs95G\3Yo?G+lDZXbK8tSR2?<Zc7qSe?&Cuk;VQYTWCp[njsm/:YbfAI&'QQC]Yhu?MX
%HZ*9RoM]U$;M!PgeP#Y4d!9GVIp%6o"=!%ULq^<"]Ygt=a%p[1S8VXs.=A;3^F-!bfFWc:@"TAmg<a0hYI:KIL#%(S[*K1XeCU>\
%Q'Pb=Cn.!4&$*DiJli65$o+K20re)55:IK_9ZF[CJBl+).V62DABG.4dOu;+CJ$IUT@kWY^OBC0S'ULBQG+u"<cLua._N94TgStk
%)F+,)\U3iDaP;%7jrCo$9#>cTKbLud6GWdZqL?]8_^@IjDf4A-SESIciLI"apK&>:I4MA&Q;0K[b1#P#e=25qqp(\ja8=0D.7V`>
%[ca%,c[Kk0Xt!]sjo7K'%bAU[q\A=oQ2EUKFFtsUk78(Gqn-26PHs6r@Wr4jSe@:ES(%+XNsGH3&A69V:['/MoR%2K(*<:r8sYZL
%Wh$tMYp^IlWI*fXrinkf1Mf(Xf;.GXDS&!sdEHNP$i&jI.X_Mt\KmCq-k9T97ftolpVYATK&6J!k8ui,LYE/B6^1Sn_dPU>ktA>t
%I-$]g=rMfc'LS^`,[:102G2QM25XOKar9E02h')\Am*I`[(W?k7[@2GSS>lY%%s%YAkb't+>P=N-P;cAB/SFEM5XW]Ri+7`D*)N!
%o[lYkbcG6j8G@_M)"aZY:0+c=/Y^6S!7VAhKVFn,atqRI'HOa7<F'b2'k^ZRd2[HoOG3/P+Xt6p1kR%R!m<oO0EBA&@FR>*[YAu`
%Hru,8B&O[6fsU>26@Dg5Fg@=9'>%+[WhsEGbBDmpE!ubWMIdV3Nh%&fC#DX8TRBhFLbX\">R3=-G8ARFOW9oHrh?&/K5HR3[fW02
%:l[D3cT8YsN94oc$t-/tH_dYn<7/S-hU5ru^m5:A69XQkW,s8W)M/<ZEABp;**nYnV$dor#>$DZMl@ocC)SHL#)Ip\$F0r[&!D^Y
%72"gB+IS6*<`O9H&4(A^3K7S3TZdg.&601>)B,h+W\W&a6k(7-M%mo`6ofckMj'N'V2VKc1TIE7n57^>;8I9DdOgHBCgF;+M)!"A
%QGnfUY,s.)$HmtO[IF!W7++eff/7"-3([%7Da[kE!X;C'/TRe_@4@qRWbNk.+cf$#Q=1#@@>Tel$E,6c<)"uU:i@"Z!(i-K)CJZ;
%;hMZ=@@NboMP3s7Y[rh;WLu>-AqL?t;:i$/0kPqHRgH*t!<OJP-;kY9UKG13c5b4ON)0oIl:TDIZRmZ)5pq89]Fi7dJuY\ZAFd6"
%lsPgWX:E,1$O>2n<Pq5#"VGGUb`!eHXnPi=j!ln&<N'JsWcKRV+u9:pR3@IIQiR@k!%3mq+\@;`<d7UE5#Dlg'+$_K(aj!i1dhs[
%$m\4'b(EY)KBUg82+SEbi(0Pe5a'K',ak=<<#)W([0>)mNh&J!ALX?2a4;4SJKE`q1/O?!$gO1><]j8sh;e_S;s,E2>=^Ig79!8e
%b6Y-5VIOTq9HBDI^q+Lmkq8,udkNi(1AK9EWm4#9?ncl0.apg.[NV)LNZnZ/p,*hp!p^Gt+<Xe3<)@"\+DGM5R1=$P.cVe)DO]6H
%WhK\s_ohV69ZANm'2hLeW+nD_af-&m/Wi^j5/7NGin`=Wm;Q$+!VF7?"G0/I)o9^s%c\g/2Zf-g8-&U'=;<BcTULn`$V$EaOM@E@
%`[!5&%PdT!eH(oQ=7FW8>1Bq^CVp^P(6h]/953X1XYU$K(B-]eN-cThdGZSWk>55SQs^AhU][pET\+K4=H]Nc6GV]"i=Z2%^u>H`
%^kfM."0.728lSnqS:\7;'Fd=!8A\N6q54R#"ecm>.#@.J=O%V%Y(PsaW0.#e-U_"[!W^XcM\QA:<"U+Eesu_GoB8e+_NiI_PsYbD
%E^1jO5Y)&MUIlID$O`\gdVOaS\fo^886%MTQE&1KZifbd"2IcMK2Z2L$n\ofWEJ&nDU@a-JrDch&h3=/o"niHH;QDs!UqM;F)qR3
%Duqd^r.bXRT?n76S/X.l"tX#$/lZAs$+j+AJdo["dg.:G%9VW=/?#cg<)*UL#WsMKeIZa$W5(BF?%oZrL0GB<*C-&%%Xb^(\q#[=
%)Eel2TG_Ea<<_mr%@s5E+g[#9!iD>1&tSZP>V/t#.],LA"IB,NP00e4!DF=TOq^R,!NP2]W'E[ZL?9PS*EK4.jq"HLNshrspkTXR
%Z#J28&QNh,iomhn.6>NkLB8P,Me3_?O(rWlKiE@'$;_<s6.q>&b=[j%30;(#FP;hpJ3+YV$iiD4e,hu`[/uC0i#[:JeR1)90Ol6t
%XD&UX01>49/lhNq*7T@<fC6IFap4MAf"q7)J;Wgj?l>bjf7IM;<1#W6V)1[UBV;)M%#$MAWSBF!WW?Ks"iY9ZM;0V@r!3oD9FOkp
%Jr<[6C830t!D\G\jAe`g2Ya>WLrhdE0[1AXC&uj1bQFl%YQ%!'(gaR#]#?N:8\t]7Op0$`E8!X^9r#;`;5#QAPS'c-8/AdY%.HZY
%'baEB.`fmZo,X(uof#TBeO9-P8RQ!q>nqc[?s4kYeo:;tnqY>^)$'%)\2UZD/:YT9Q/TS*k>)i\-PfShS,ig4@&_qJ^kF))?.IpE
%$'IR"O>YPk?]%uS;KV1>8@k\G%%pX(pn#tm#I)N.aP;kDE^PHJ"tH$,P%,X@+pi52b)eC5\8X\b5ohe6?PjhX'D2bNWbY_^$3192
%.Q"1,$#H*I,RW(T&ZFc[K]PmTO"7E6U:[TBajNbX5bbeU2?:]*>]+>cadj8Z")K9<$9!5#?j=Di6YeYK2Cs.CC,8sY@AkY6I)Sej
%7V7s<L;m7Rk3uI^SLYZ:-4@es4$J?P__tGIO4t214LSb(+GDXHn.H>*-qMnjeV@Ra2t(^L),N2F#bVLAli\XTXg"rs7.O64$GHip
%Z&kbBS7I^kj9Q-bNsuEV"j<2$('b$n3'^D\'#69lfO:]fPS5T(S3t4"`F3rIp]4a<d&:ra%dO>+Q?O.PWo87o7Gf'8'd!LMChR-`
%`8Ci_&7O;RLA;ZQU-+1/!H;MaIH;WnOCgq2YQt=mCLN`$R13H@#`]JC(<.u`TepJRb5*GeC6rBKXsHG]'7#-fcm`WYTHVG\2:Ap(
%r*X'NaWtY;MbkKejF_Ic3iGSI/4*gIbFK9O.>X3B?Bd?lF3pe7O`EFHi#>7BM*S-s(a(f[6m@a+M;2NU&V*P0&08QK7urBC7!&NX
%_214A>+fQiHm?VY!.'b1d>',\lTDIBW^Y#5U,jDc,_78G3JdeF>m'FpCmd\60d[7=%1>MlAr,SCLQd\$Y%9+%G8c(S)C&+u<"/1O
%^g*'ddK6$C8NQ"QLdVUZ8VgM;+hZ"i\H>YS"37nZ[`>?oq(N(9BGHXrMF6uG1['))Zua!`-dkFC+V&(fFPoX-&$UjHb2bjm"f;AN
%Pd85l*G3(M[G7!(JuB8bk6Bi'l@TBq(_9$-[&BP:*i#4BbC[\i\@o``Ct0)gNak)>$C2dNHBYtL[UjI-VSZl-VrQ^`e%"MZHje14
%KY_'>U'=S'el'%C]Jjr>FcK/ZULLU*4645G&E[EnMnB&H!<Y6(IgiOk]R:?O:+iA\F0oG]P]^7TA3a59!$DGm[iO`E]lI'5;(RG/
%%f*5odm="LO&K&#_4WjA-k.^4R,BMc)Y>*@Dc?E3WWBG;ffU#TVAtDWE7f\`(<=0U?Kr[Hn18"!]+DPG<M<2md:r=$4+O=XB*:nj
%$9eTi4trd50b"-nLrrDA0V*r6_LaRW_5SntSRKs6OYpN:"cq*kmO:gO+B=/d@>3&=9Y.6;,Sa<H)bQ\L->Cg]^ibEH1ZEsdR7qYr
%$5?JD'bh$$$apgV?lQF1W.BJ]i-HN'UWWiecnn+3.o@I[!/2e#"4tO)lU]!Z*,grY72;]91+ZrFGsiOF7uQVZ0c7f=[*$d7TMZqe
%)alG9(l,pM;EKOak]NlAktuSc<M5;9`O-J\.THZRl8T_:AsLCmPZ^FXJWh_1&pc'snE<j8=OCgLCY[Bnf`k9]<6h\"kp`,pNH/>T
%psHN^&jiN*ZU:Obi69o0`<?oP.6LW*#U;LL*$NVphGEU&<h%l..^MaJ%EDpS@TKl:kY-bY@$+WdT5L'%#)5Q$%MV;Y:nj=$BeJO,
%TJGpsUJu%>0&U8D$q:VB5'Pe5KXi/Ai$&GL*#!QTKF/:h6Vq0X>b0988:7(^4!o5B6b")DrX>#Mg1psDJ-h^RF)Y(m578s>+V3:#
%,(WTkd>%r[Mc!MC;\cIo3+SRXr!rHE(k0=r%do.I6B^#Y8EbJa"A!T$Wi:oqMto&+C`ib;U+@]je0o]5%(3U>@6+lSkI<&XW'T9$
%,DQj7!#TC4[n[<i0Gu4j#TS9\0As.c/8j0@8e5'0-(+l&TErX.OZnA.1MA0tUB+kPB^hZ1d1YDj'Z35sMX%+-Q7/Y?DH%gRb7?<X
%Y8U5WXdQ]$LZmmiaac?C`rHBlV&39DR&tL!]V5d>6,?L`J3;K*&!0%=\5n\o#8<(bU,6P4W#EU>"f9AT$sK?j8m\;]KqJfY5].mi
%NAFT&He9\>nfoX037GCPL_eJ#VA#/!C5f%SkWrlO?_\N-[]5^jLrp8/\[r^g$PW,r0of0igaj**Jl^h?.526QC5QU*U5Jraj]M'L
%Ta9X5_ANG372TS+<R[&/)MQI!I=is0TGIu8K1E7&WX@>+5gO1`BY/[51K4'R)U+soWhNuZ8@UXH2)P+M+2.d"`Z25fZ)K1RN<\TV
%UQYdh5Sm;a#;TNEnMSSLHDVj1UTK&dA&o02#T#__4@05mllD9=#ahtdTn0,7fEr-C<(7d"[2fX&!n9.a(=3;F!HU^Im*MUNOFVDm
%'Fe6_ha+GP6%9.Ze8Y/5UCF;+NGG0kp.Ed^[0oia0Esn?e0d`(!L%nCpd?83M@o!++H%'CiZ*eiU5Gq_?bdK)*TR`0CdQ)d._<oc
%fL<g).YF$E^lrMi\W3W4U@]0X!99n\S;&Wr"rVD1bRR&UnU\MMWiFo?>kAFn7T3b5Ae(\>n"U(rLue14m=pdL=8h_$1UFHYH$;ku
%]Jt_?@n,#r59;p#quG`Nis,to@#-luEcYn=)ubV^-h)\*bL9e*,@$6dbh6Dmf&/qEUI@SHJ>LTr"_0Mab4,`H8AYu_;,M#Da]jO.
%N_$[$9-ePFOJJkg;fH'jbJ64s5coToPr7&;Ekh<-Q,&N\%(4>FAYc[R'h%d68ZKY*5gKeP'T!arh@e3=f8c12XVnY5aVto,)B9uS
%7&Lr\-."O)8(@peOc$bU80Wg;-E=RDo/)^E?!"P)`?ZH8,=rOp/nlRKrK9XE(72D2R,!9`P"(Tt-u$rbNc87OZst,C1_sV&9[^Eu
%4s4RpM!pP7N_s=\dcdkC8=K;oO>KhpP*SNOQfrsqa_1%.Zlhu(7S9;KJMa%KQk]#<BdEB91m3UWZsaBlBlp'F,`N!),RpP8SOR7k
%:XYUoNCt0<K/ua)%S@Y=I?Kma'pn-7V"&-6J><?GOu-)5,d#`eF;fA6qBQNYWaD[OHjr[dY^M=&>7+/Y99R;HI?I(/<?/<#,]0de
%S]3VmO%`*=[b*:17YV.:NRU-h9<sG5F?n?c,sNMe6'Oc3HhhYY")1T21%siF[@n$X29%t8U5#>.2F6>s[`niL`e#%I8>6=:TMjOS
%c"t<d%BaE;;?MW)Ogq4OUr%YX%=LL@,uMW-as@Mjerf@d0;Zg12k80N`)%P3MJbsQoN*#27QVaFG$#:N_O(A!=WZ*Z+:.BkGM[=d
%ST7"eV*,tIfsJkY*YaP?69#Y?B:58X*_h?ta:(1'KN)6NI1n<`VBY;W;oqTTR`&,!AY-6%M(qKA!o!\;)u$$@1)ukcO_bboTN`XY
%dr5u@@[:j-YRa11A5W"m<%O,e/tm_>klAj-8V^sq8NMC@\>2jka9En!<"l`\,tVSJU/02a`WNg"-YX5)R`-Q^,eHk#=DC[\JT6N>
%3j_59UdJ?$8QrE6OebA!(J-Y%<PLp,,V>^=,j><N!_J/T(J-YQ`OM^\FdPqY\4I^-2#-_A3_^P?"-Nk'^J<O"5c8HW9W&!Q&sm]R
%Kd'*D[ORHIACD_oLUJk!F==/<M%3'[!rY[<!KmVL%`'c\FF]6g8NYKWS]:7<I?MUfSpcb+dL_t(0Y(Pgn[)r$Up8FBU]]?aQZQno
%,"[Qe.[%/LdNV8<VD"*S.&q`Q%YB/%!>+G.J,RGIDVA6X<%r-@dc3$NCR>_iq5E['qM^4[*q2R-JlE.T(hGR="-IMJ8lSEaMd7"_
%M@rjr_fm@!L(.PZQVVU:R%^9\0AV3;f+)s;L@d<M:mq^^CbV,%Qdn8<jc/adl^llH7c0T"fGiQEhCkMZ*\u0`#YF&2$q`?1go`>"
%c=I8W_n#fTj4fq,d<2>XIct056W!TH-D8eejWmIp_=D_*bTS-dNa!aM2Y`.V.NL*1.OC?;b4o/16E(*^BKE&)G_/62e5Rc0Wjl%q
%,fLP4WjjuYW>gU?ehC1L%u_*#D"<u6NKD(tGF<+%:kb",fTmWtQuEg`BfC]DeY"%Up-Fk%lsi5Gp3UbVh@\oRO\4Id;H9)@.`bBe
%,>#_"G9g<bEVN_5I3qhC`8cD:[5$&q,he5)&fs@eP![p-G\l0okC8Snj.7Vqq*@LB*H2OD833>4-f;`Ml9_^l#Bf8:-W'mL(_rk&
%&Pg4816M@?)BKiAJh\3lSiNh/VC%I">I!rENhbTZ8(.`%&^e("JR01@mu^Q=!&'K0"rt5/a;g=11)3?g3-22>_%OT%*o-*9/N=;s
%V`$@o<K:^YkiB<K@XV8J\.5W[*GTtCCbMIPK5sNE)pppV6B]SB.d\T+Kig\\\K-&:#e(V4A0??M_)[2u[&(\7#5D=^PH,6m`U7hU
%F,4AuE<M&gn]7?BHe%Z=P82U/qg!EmO)I)eCPigi3jit8E.WeaV5Tt+X=?8(9uF?K;o;1s),0H;NZc/+"a0W!M'6aV5`3D('4<H0
%-FL5V@5oGCjGU%SM*RG>Q#n*!(8JQ,,?,0rBq,D1NtR17VSc_2Zo"7RFm+2\StspXc@]Wk@Y9\9=,NH,AHl*tLN-3oQaYZYZ"g3i
%3(b+X(0<YI%j[A4'Fd1+7nbrEWaP60cZ0850l9T`E?5]`"GB<$3HXhO0<tijb\U+B.9rY\@S*GLG/</`ZmL&qFbkkbWK+jA^>\GD
%e1i:W`Kk1>8ECbG%5K=',fG*mHSRJ@FG*'Os6(m.)?]*:^DXSgCWm,YVuZ?Kht=on1E5N*Yf/msEGgDHm,:oKNc^Kf2uYfD\,V70
%quhcsg86Z_)S_%5M)7e;4CJ^fCOhsN7WpKhM5hKLj-L.Bir/tX3O?KT4O:lc=2LV)G<8@k;_pg@1gMEr3[fbY&b$Bp68'V1G9I$C
%`T!Q$-_OEu2]>Kcmg4VuTfZ+[*k<-r$F4JU!W2eh]Wg&k*`S)q#ciq&%,ibq\UYk&K62K&Ec!AsU%#iI73=L8NQ!s-nGWUF6(nD8
%:-dl!khokS)c+KtM;RlU,i(;ng44%5I:=BLJPE%Ho]S9!.<`An=?Bq$DK$M=80(-,d.p<c(#DYM)F\NZ*FT_Q0abLsN2V:(A2Y/k
%/4A9JUeO0M@Jj*!7L,i.DDgt>5*(a9.a]^gaeJA,8>7!?DY[Q>=o]4]Z([0En7.?cIjqh:3TQ>W&[r$1q3E!%1N!uV$!Fi\!*rhj
%bS0>&e"Kge:q93WR/k^qkoUXg?&6#[>d6g+C])OtSf\C"k?GaN!#&gD_(c>::dg2*G1Q2nM!!(3'hdY$0X-eXpXgm[(WV!7@t_="
%J3CB@PaG/fl$,u5G,e^k(a)t;.X=$<!'`?RQP&bAhm"LifSIEJh)aX%D,+V`14r=ndICE(L#9e#'Gtip&&Fos6YEe`8#3`s2,-,b
%KZC1a0W%<??(A(7H^[4t(;Jrr&26D,TM(SJd-qH#h7A=D'lU2VT]as^/I+j]<+CC6!*;4Q5,"gph-%<hKBd+c^R8sKNtKcUiS'tE
%$gC3GXpO"Ss&XDf4-ns[FhSZbGK?6SA-:M@#VuB3<@Je>Du^ic"Sg7jjcisN\pB=,YmnI]q5q'H?ppO,<m?R3eD0]WWZWP3-Fl_9
%T=+!aFp`)<Mg2G)#.dL+\Xn'8h9Nb0@kR;S:IOpA?oH\7[K)Y>:+q9Ib-"#)Cf.W&89+hC1Oca$RJ:F0F<GP/S2I`[[E(U<<DbL*
%*(`g5U#BIMH1r.a*jq])L:5Vj"!L8VhuJV+=f400j)db!%ZIG!(lC[-&Z.+<35LOV8R`n++o^_+d>9DlK'1.mmh[JP!osf5gt6(-
%W>k";4eRbMp[+AHoI]KR)XI+/i2<(cfq](or_WNi%UM?G4?B]AP<ZIGH;lS3"&fFCR;6?;'#d,eL5\;e[*QR;Ngb>XrQ+b[bjC=2
%Bi,Mb&^hnIGmu!E5\p>rp%\H_LmN$n\bQuN3K!4f2qRi%a4%L\_VR/WD05;^n>fJ%qQ@:55MMcW`mI0,WP)e(T(`%p#.E/\b<hE,
%:b:2YfXi^JJ^:M]`lt)6Rr3J_:5?C)OXI>Y1`nqj7ZISi(`>W<Co4hReM7/JIg+9fck'hd+G]gA;uoLoo+Z&YiGC,Q[V`;@eCt#f
%b^QChL9C9]bTiqb40:k6,U.VVA4_kX@>E[s]YuQGQ<m+i,KYn(#tP@HJs:/LZjXN2JeSdem^??B#%t5%AW!R[BkbcW\4mtV<l\p_
%WO[@.:\keuRbMY$S86T\n%#;uq"gN(d*s`od%jL.g^Y.]@k:C'M[`:V$tXs",.TYu-:Z9`M&<78d!>hpN$[/W3HbMLBcY+J9WlNd
%eGk[tg103cF3)hk.8st[,4"=S;n(T1Vi+X<9b+$c.'45SU>q2Q__g2e@a"R@[TNc13Jg0tJ/AtB.NJ+chS]>82#!2LZBOkLlna.V
%K<q,/CYoI?6F7@>(Q4>4PokU1"6Tl?C35J66toQK'61CT6dLdA;Y7eYEIj[Rm-IW@MH^A_#E5jV,`(2P5bu7X'b6EdkO9&1V+c;"
%DF4O>Nnb-ZpotB_kgYal:\a/q&h7nH&Ls"m'7;)'Srt72d2_Wi>;>G*At-`^j"fR>_B7/0mpmF9YU^@oX_48A;47jE_pD_M;@9F'
%&1K>iP?/K#eQjP59J-$.k=qgrHa0GgMerG!`Qab*"'^/OjWqGd'86!)3l_>j($J,Q!sp9\lTo)^i^5>-N?p>?q-*In`>rg(6L*:m
%kaH=7O2$,%r2CrG?+@GrC1YNILfkA`]1BI@cF&bo\a2LX<@I.gH`fK38]s4VLQ4`oDBgonQM1sQmS0SF\AN-0:>UAm/>&AY86-G(
%@eiR3+GDK_;60e&0uQ%r4I;hCDaeFZ`RVH9"6;cd(A)+.@+Lg51KN[6[t)&m7h79+5KOcdg=9sGiA#+=fT6JiYX_EK.I[!rQH2Ye
%5ZVhL'/dPcl?m&e&JN7`9a7m*^#/JtT"5=ko/m[<<UVIp$gIG4HpKrGh1*h9ogEhRfK*tV.Ob4qcE0_"#dBhCa06WD/"Q:;^Q_$H
%Z*YW@>8Td^Q-GE97a.AUGdDL:A?opUBF'qB);SuW^h)(PjEh2MJ&OJl)`UCrUV4d:!e!&Ih77=0O\Eq<-<Dg6cR8"2%0:&\B.7gQ
%j##t@\bC:0f"QJUg+['YogSp56)HV6SSD,)XKk)_8('l.9AA`K84g#5E(Ztc=4U%]B#mH1`IVDcM1G.$CAEsM7.e1s:C%13U$)M_
%3>(Ld-4P,`/`AG.OQFscb_Lf6`jB.Wg&k3p`7qW'5#2Fra+RDI9)7e(OasXq$]:CkKs]0d>ED*FBHh,=FqXeqNj*;[J.l<#<Su.Y
%?0lGhpKKKNPW^W>9$%!FeT6,iC6NLqOmfS:^89NfbAU^WJ(B72O&j]hafdo:LZIB-PK(R(\=0CqJQ[3Mm->FTn.QHk_g/OUg1Ndp
%gE&'O5+ZnDGqCL:MB;X>#J@7S=bX\%hjleq=.)FX@n1KL7fjP:.#UG+aBMgM`UAt3J6Xq7aQn$?</(Qd&FIIUSt!s+?jkPFeXTG;
%22LO9ZbriNc47i@(OP;#,u;4a#"I8KPXh14*MS0Tp5+G_0,s`)q5O7/<O2B*qf(\6p*#cEMhACs/>7t)=m]>s=iDZ,aK6^KldSNP
%:u"/oFBRE,[-FYmnIEL]lHh+Li:Z'8<CM0k;C^#V\CkopE+[g?^'nVi;Yt<E_@."S*acoA1=sEK6U_q-R<$=Y`pRJDaqHN-o`$:X
%>$4l]m:GJlq!h^NC'Qt"+D3P53?SBmQu>\&;H2A^gC>E=aZ<"W`P[+0q(t>tmARYQmiCffi"f3iMt7[o%.!!H0WNScT[)T9\iYsC
%c]NYX1p%gOfoF!p#K;V'7&]I^5fp]n3<j#M\'A$7@:n<g.N/%J++]GMhOmuBJ<\*$(=kpSNmB]a!Oe&:'6ceSE<E&D\:MYh\7#`t
%cf,.4cJf&NGB$!#EYCAjN/P27Mmf.o9jI<rge,@BM&QnK&U09!aHO.,K5]`bH5?6H=;Rsn`*IQ:qs836-giEhB/e1cFt7G/,&[0T
%0&iJ"B<rO5qG#aM&h`2+\Vmu\jk9!lQg="0QeUk-[b=I2r8>2s5qh6cKlrOC:#&RWh8N[I:>BQuc#*gEmc&uDm36F'?7t5,,'S%1
%j-/00Njm]dEu/h;<kXE<*Nuf=430kGE5p\Pbn%OH)tY?B?<A#ChS_";Z(&6Rg50%"Za71)r+pP7p$+*r3T"F-,].aFDp+?tXi08+
%\9[KdDQLKpEGt/cFt:u//8d6,n)@Bt^eNUW(NK2d\k)MO+J9WW^Pl-iN<"'R3UB#m'[Uc9)N_jrF8_Q-j8uRiOUl(OOWH[hg6Mgh
%cV9Obd`7%Q=2lKEa90dLkM;\'3n@dX_IH<;.:-MT>BZ&)n@u=H.S]BV^ECS+`CBGQ)IE'I,6=nbo<rT%.0Ap5)]Yf$#*,6NKIuM1
%OjZ[g*jk>W\fIH-F%&/N=4PpE\a%8"SE4m"/on,"@Y^J?eb82od"Gj[kp#>&0jE$KB]?)&Jf]O+):F>eK!&>%=jV:El3(C:XA7-u
%f%(/=mX^.dHSJgeGnY:tq`@)FZkIO]HC^_0G!$(7=6Q]X0s-uM?'+k5B[6T96/s%L$[Q=!S-7(mG<sj*jXfW,$[%'(HW;HWDH#j(
%?$F%Nd(Pf!o"5:?e,#W./(t<@Wk2$Q<A0pH]l-\YoY+UD1uXg761=-')%F47=jTQCScrCkq9FSpgWE[GFoU\/?$E8Cd+rlr$+fPO
%LS/uK?0(gbN2>Y`T,V4/_Q:Jk("$9#`;0Y6;h43d]=iu;/Y=YCI^ZpPl*?tSreX_Ubs24*oB3;aIf&]r0;!ak0402-_b6Hu>t!*6
%`8\\XV]R(%fI]I@Lgu\9i^4\>nFGJ@.$!dj%-.$6f6,%Y^-EeRO+5#EMLT#>0+X79.AM*6oRi`HDoO]mpT&P0:S/n?EiQT<%Yi)F
%2J!_IEq]7Fe6/re_2HoA;W4JqT;ioj"G/U[r^j:8#^Ao_#T3%14N/sX$2&oI[=64?_US/"/`@:OnpZ"u8/M_ZRaU^gU;6Rp]`7eA
%`V^9JEBO+ahoa(%i-+Cr$2HThr85/M%Zoh$n+cE;IJV^mp]'pZ^\mL1T6[r0lbe"Cs1Qq^F)UYWs7sk$?d<K[8"B?5Knss5QJ--T
%-!mH9EOhG]'r$^/$6,YlG&l*^S*:=H9L;W;N&Fndqn'$?l.R2s"!Dp/of<K2j*I>O4ZLOLHb9E31783u\!Yk'%PXcCCim1(6t_Ib
%PD25>DT4[V(<Ms;X6Gs.n)kgW"l1o#Ciar@F38,+H,[G,jaG+<;)*nLY<^;=1c`:H8cIOQBQi*ILgYR1]^7G8[h4,U>cKCDB-bW.
%$-%\=63k7uj%F(L8GLdJ`p_I\L3eI5+&BLsr0ee3(0((@YfYjQLo;\+'BF((EK-6aGSX@Zb`7RDY:rK#BBrsDPa/.&fR!K]EG`Us
%.^$J6(\i'4:RU6A6?<TjcVM<Y)bu0ij$c(kIM&:>QnM5K+lHR*IIr/p\^HmtZ1%J"<F"@iD/D2hgPAO`MTT@qbkacd3b]R1J[DjH
%/4e"oFX@]HOt18-m[t6/Ed]NP,$8L3N8#KA5=:lmDf0ljKEoTo$V&,/#*+u8:</,$K9Cg1]k3\Ib2,`PW/P8$BY\_(LRMA42X0=B
%$i94dEgl<kZAS._5"E7"=[=(hoqMH:-gRU!="!b`Y<^1;iO!N;Ee!hm7,[&Z5]]Yl3JR&^hS%WH;]>^sdrXP8X_j5R3Z^Ek=`':8
%Cf%6hTQ,?AmIo;b(:!AX&j4,'GcEk6!`6-.V[<UrC.%O%7'KMRJ..fV#WC:][iah9EVO[qF]'"e^:%sJr%6?$"*Y44o@$]X.1IDk
%s5]hPH1]EY/)O"YBC4@_qBk4X#s3R]hlYo'#&\/H6.$:%MJ+EbSA_bR<JlD8d*\.A#1Ul0[])Y,%235<DlosaTu3rD?.sq\D(/,N
%LLM19\a=5PSj40<]2t5.Z?$C74s`5>j5#pQ\MCD#nf'lh@70`]_`+Jbeqm2BEQe<&Znfa1;c55UDU2a`S<ag&CIT?,-YoSLMjg->
%LUNNL.BVk0Qn%rVO6*O3ggc!aa"[2HGT6-YF0Vjc#gE'/4WB.,AFPpJH?9jVm2-d7lX1sID7kDHlaQ2^3?fS7"?58prb?BD/tR60
%WB<7A[R24qG!'PW4qb!3"V'+tdgrk;nkI.VOs%A4_(]2\emS"F/4qF^/_:N.=)bB0Rs0<\6`1?TGk-K)iC,OErR'qTX0%B_KAAFt
%5uLjNgjt,mmB/DK6p;1eUDRa+8Q2RRU!93$FabA9m76,/ZV;q.ZFB"Qn5/qIrAsW8n3H<h4$c4XfqWnF66,mK+;NIIs&e]SiD@O2
%=]D/,WpMk.h!iRV@<J`jfR0KL3F[sV=2ieoeH_3eH+Y.3lf?<-n*B%nQFZ<&r=Yp-]B\oD:%7WN7T\b4#&(9MlUUJ'g:aN'Hl,M7
%"JHua/u83Pr52EHpJUlgX(rV:q@9ATGi[`I\*L%LihdWJ<mKt)7/Md#oMn=!P%2$5Pb>bO1kaG-,_U?K*V%_D8+s%Og\'(d+bN"t
%RYm(2po^U)-koLMfC=`p4"XNF[FUS^p2&t4#7?D*(M-%<UB7=iBE-V.U__Y=J&QW4gl<OQFkRDEX_LT?"EDE_M!_8HHImnODt`=d
%ZT@%N-D..RW?i</^h(_BluYqFIEp">dTh3Ae(\-p5ZHk'@Sa-,'DWZhLPYIV70m+@e0eYLZY,rc2.3u%HZO(`f*5QM[)_;m33ce'
%OY_<"XO$:V+[:LgW79RH>>uV$"f5r!*r/^gWI@7!pU`rAV-LTOfqS]'0mK$.me'^hS(&*c@+c3$N>C7\[FRV&%F[.h/ue4cb'iYi
%XS)DVg?coAUMpPq=8\g%B8a+E[P2&/-nAp@.b*%#9%'MC>J57XJP+\;D_odZ0?9taOfE2V7Q^tG9r!\f)K*lNEdC',fAiUQ3*l`a
%J04`_CQ`P0Q;H3'GH7OnYUS*^Ajb#B5lpNk"gVD98>S7rNj_Om;3'YgAeJOJ[QJWO>!u*o3j'<aa>](`-TM'"85-lZ2n_r&",+F6
%U[g]t""Y!OL)s]rl;Wln_^/(B<X^)2)S3i:L4Q-n_haQAW]1I5+9JtL:\noGD$`AVa$;B#';?65k"(p;ME+MpL_D=h]L/+J.&Gs6
%RcrWlR#r)2N7$(`\_B[3L:gSl.CV$n5g:mOEr4G@";m1@-!5HI9r<@2:rFcVXN/e-^Kko?92-tX#/,\l9::Dn=7815gXanOU(sT)
%k0lAqNF:SgB^>Ae>N>Kq7XDT]gW*,=Q&i3<_C#_=FY@W2<4$DdlSO@T1g_<$$H"tV<MD\R6.[:u&^bdRmrthD\oF4nF:dcI8t\'V
%BNUKp3)6W8!."@e(B5G5At7RKih@1>8+Mb,mdD@+&-J%e&eF!iU<I?W`@QCXgY4:G^ql9dN`T'+2j`'@Hj]&-c"6eQc.oNn--\.b
%m/kCrFsrf!D:>)/L3":VH]K)'f[Vm97!-PQl_C!J`XARgoB*LU-.AWa6N`C9W&,10f#QBAdD,Pl`RrNJ;>Je:Q>gR@Go?-YF-.@]
%6Qj5G:PW2E%',R<+$GK1CDc(ch)_2Um5C#<YkIq\H>D0N2:`*lTXS<`Z#tl0n7l-B.!9m3[*[2$9N9aZ#.o5k+8H]D\,-r%Db9pD
%X"=Yq!8i0^WR_`_cg/Z[5e;())\S[0/JHHZd.cTF`UgY'moFFN"1PZ5T^7!\/fLbVH7aB+)X0FpZY<.qcU5qcF.5ddaDke8Of0O&
%mYhJW/!k=MqB5G]W@Zjk0b*$qp,3@A:usIgT3jm9'=h;eViVJ$]2f<48XcS$OmrjAj]3<)Z<eH`3Kq-OHrsI%MK'VgY6HiP(rjV$
%>9W$cL[YF\dCd$WIF7[8`-,DZg.Qr1R<s<U'E5VYEOO#,UGNH5/TMoTbF&%($i6QnemgB0dWSG"nY4:lqD40R/[O_tRa>-jP6\bP
%m(lo(hlOCWJ*8H2BempC)2sar?fBDS]5us5;E^`o'i/RC),qh[mR`0U>n__D6@\OfeaF@Q*EH8KlCfA.*\@_Wj;)q-p:M**lGr:Y
%V^]A]F'@SV&,N.OP)=SZ*Ik9hWZSS&-@s5hIC#lNBIe^j._Ep.W$e?W18@R3pEYf6!l9;]I;c;7lu8n?CUl:[rE0!l<-ge.N_)`"
%_faBJLdKj#Y@KYZj4d5>R*bTHbb8-meifl1,b]S@cT7_;6_XX5Z_#lM,2R`EKTaO[;OEol9a"E;,bKBS4]IceS(led`>RK>#Wc:T
%'VpTYU4#`Ln[lOjM`J!\Mct/f1h)fFmF2cMS.[h+$#X%#6/@(dZXn&tN9ZIUpr%?TBMK<=fjl2V%_l9kD7*1_]P0`Vq6I+W0e/0u
%8ZW@HJ')msO4G.7lPD\Jo-9OmlbTFLZd/(e=^PX7Uk5]FoQ!#^Tp0ZRO2n:rK&66B5U.ZTo]QNC_ZEknCH_@fh5[8gbdKD?5ZOu\
%5ZIhfN,&,^`Q1TuHo-O.Fjs1!c#jAuG<>&ZT^,$)%k:h&UuCAmd5[PZRrjG(e9b-3ldS!=N4EYNBq<H#R9nSPW*Ha@3Q,7KGoC<C
%hFo-Rh5CD@V3Q/Ect9i@'1/%MKfP4Q)VqC>%TFNLOf3YZ@YMJ*m<s\Y;'chp01!&+"$+)mM>Q,d\6(c1W9ceVF<8$:(jEQjN+*P"
%CAm_RQ/lZnXSk>=1_;$+4g;<eb@(5#j&r"(Jq>J=`5Ui_b#N$F?:c=6ERO3Bfl!UY)Fuj/R\T.RD2ndA*okUhn+8sTeZW?Q0#s7;
%;au7o<Ks$#Vh"J#2mL+1Ojfn'L&i:5kn`KjOIeaU7!nW[^+j7P,C6T_q>8]?a10B214\La(&9<d"S&61Y'`Y"e>Cn]E+SUDCR[h0
%9g2\rB?@kc4&l2Cr3PqC6D/bpOdLW:C3Z4t4XP)Sl[>JJ8%Al5:Z.h0c-Et2T,p./ns$7\D,l/cdL*)X4cJPb/50hmPqBOQ[g^5#
%q3[?oNH3[3jU^^O==8$)HXA.5<'3Og99?<hK#cJ"J\V($o.5Kg2DB(n\.X$FHC&(.("LZA:YO967E$p'PA-)nOorTD;D.Lj;mj/L
%n#b"*?%0DW>/U%^G$q0$Q-WX.guKu28B^)'2%Z@PahddCF->!ejaeeMI\<UiD`+>/0?:!7rY4[t!Fp#iQ\Wsejnqn7de:?G'S4Ee
%eZD?-Ls%`dB0YU,W[36l4b'qeWZ/F\9a8tK@T6;QYX];J@<!WKg/V&,G&qep1AR9I:*d-j(S?8E+R0\$$q7*fDNBo[;iX-K;J.,c
%jnfJQZ#UbP?WuoogN$D0hZ/;aD@`/X1j_E&WMhrE4Lic>S/\/&<,^$FSJ5;7^Smm2:)0;dYSMl@kK)*t;m(a^S\2MtI@ZnUSbVmO
%%[@>HrVlSX-LQ)-@ISHJEIfWQT&tLom_diEWF]k.=(lakr7tP?."CjP;'g@F^3d=!i+(DUBYScfZ)6eB2ZN^h[Ir\sM`FZoSY`k$
%h.h*J%+d<UU?HhhZ2,sYj7-RKkGd4V+]T<dP-p<Tr`j<Rj]-8m9@[g'L)"_7Nae<,I1:R)4h*!DY*CKJo]s!c&_6KVf0$6dWp9E#
%3`(<W@R^#W;=$uY$pcb,n2XKb+][/D(iGltKD0bds2Uc"I67^LnmHmR1"b9V%CLUdPtHSr+,YAE[,aL$&=G$'1'c?2J=(SN9s:VW
%iI^2h>jm#9AMQh:A7=##]2U'f`E^XL`s#Jek&I$o;?FBXW<\%.#uZeo8BC\@[H[cI^WJGgKWBK\)@N`:_3S:=`;W+D>m8K1Di_a<
%C0SF-G&ka*A46KS[?5">!m-+k8Y!t<-INM@d5F(<2r[i^hkc^K:a;uqXE-5m3rN`b6)D+]:9k3H>MA?k\prSSIlVY(2oLE/+VjgK
%LLjeU]DtgoiY^"r^irs]K`n&[e4ArDA4qAsT<tp%/p0BPWXG"8RS0n1%u8T5Ye2_rAM\]rmJ"u'Q*T#Bn'<.:=fUkG^tNr*Xa8",
%al^IUe_KqFm,D?o&8OhHZpF<Y8jH&%iRYgKl<\HGeI40m\mgrC2`!l.):f-&$1IK6R[\ei5f=gme_WO^Vf!`so=ZE)4HHi?qai>=
%Gu6O'pWYS?i:mka3Q4L/=bUg=fM[5AI=Z;MasZB'%_hPKlQEOLgKo?WhC&mMNrHuRa=CVX/t?L),+dk$DJ&!2jX<\u>5-E\IIQg<
%^^6]+K**js5N8T=9V\K=)9:[9[kVt@QR/<3a?H!OnJ,DSR9;:ZM\2EhS%*]O#[_FWQ8J;pE3(4#DbB%/_c`A7?7AF0bkNF/*=U[$
%!T^TiH$F;!WN-#,+sS?_g9n_qU,_3q9UjUJhVJ,9Z+DuYJ^RTVfV<MZ_EF;d&mC`6*EIBobc9nqi58;>&CfFb08hH8m8IVaFCg\l
%E:3u!R8."jjFW^c@X;Iie##(*,[.fT4]:!GlPr4pK%?A?#-p=r[YsQFqCNm&,sSCL:s6Z@of,60ki+'`qZ[jE,cT*/Se-^Gp/&_b
%n.9s]._S7*Q/.Q!kWMW`B%-2(nGpg,OhqeMZNelPZ3C7lQ+@^\oo4'*3rr8C"(iu\S,D"d_F6TRrmgV'B0TI^f@WG^(!l04<_t)2
%ndF:beYlrcNB!sf&tFpm%(0gJ[)n:$!tQDgpf(:;:28YI#DsTg/^Y7bW69+*ZG;9"F6tL[I5HM,.l>\H6p%t0da4hXM#NNc+0"6D
%hJPH2D68UY4H7'!:h=FlVBZ8b\X?)X#JkDA>nj;+0i2P7U.$tWa->uMk<OK2]&QXfIk2d1**ntbpusf$#$a2d\J>>hk<ZjlNm^c5
%Q-;Ybrj=@kX<>811>!>$7;3)F#""^;,etTSYNBWeKH_DKgua3g4@cX%kV<H8JH_l1T(,R?@nd2*F0ob6Q9mrA<tc_^:`?GbbX3=3
%.=/2mf&\*D>W[TL*4<)n`+-f17GkVHYsA)pHWGICVBAtGEnr+[H+N2e>9(RbfNEBJ7B;Y)gSr!X;Ic0HM.G>RUNItAeZ8Fg<p1`V
%+L]42M3+Nf:;g;sGrbVLEFP;FS;r%Y2b[G/q6pl=EH\N5:t7D2)Rm=K)7`UU&*rF<'RK.$^@in+Mi==!et@!LG"&<`l+Xn8_(N:]
%=hG@lUsR;07QE<lHi35GVjDVq.;I.*[UqH;%2$Za-S2^Z3F3')buV.rL:X?\E);t/j3I0Q;N:0\Wt:3SHSN8L4enHd7=iT?_bk@/
%rGEX]1^Eb4Ho``l1oB3qO(85poS0[-o/[\Q^p>::Y&8q\4cG,HEmV;ln3.(_/^n/NX^sHr47\"S7&!qNCB*?kr&4YIjYt^p;#U9u
%N58OSTehm^`P,,Fbc.:(/C13%T!4's@XDNta1U]a=X;:AQ<HB0F!lL4>^Vhn3f9fWa8ZJ6H#\6WWj:HaB9\NMj1:ktN+^=fnbTp[
%meQG+rEq7^_fA15$pX]Zan7;Too$Y!@AB:6XB/[(=/.C2ePMp[l@m>_hL3U7[^]b[?d4"[)+]K,Tdka>NgNgFK@?bmjLepnHcK;)
%RQ:_\/C1C*SZs5*SV0C.HY+58jGl'9,V@tW37i<a!@5KKONMB7oc-t1!!4F#fUYm)N2j!aohGNZ224tG)lm5^lgQU>l@LLr:u;Un
%d7/<meO?@L_KGm_C8P9j?-uF"cqdo"]rj!ZEu+J\\sc#7CtL9k_Htht)#=e%53_;]Cr#!\D#(6[_?NV6@8AKpdg6t(578DV1>ISs
%7[_W0Y`[*tfY+491;+!`%'."E/(t<!E9iFdp[i96n*)a:'pj=a2RP#Q_M1e]-L>H\c>9/sbQbZ'lj4SlZ`p@h3jXC/b\Var?.d6[
%,4&W8(R\T`/Xt0_fF9usXm"6?Yd$OMB/\sbAuil0=kH=#fN$RLHnr#aTiTo>fEB/uKMAW):"WG/3"%g/\!bKpjX+gBgmbMoQa<nl
%U:SG<->^3<n%u5@-gW9hB/\+bAqOE%2ITsZR4ZjtS$3WfZCYWeI>ls;:=`s#o1M/JA!<pHX.-2U9X*oTXQQN.fZ>&\h<HLl-Yn1u
%?.Mrg:@+1?/g>`@bObU+(gEl<qBoW"m:3?KY\U`YC"%HDG%sb#OLd>dY3[C"f/gO*%QC_":1^[G:EuiRX)!a<?T(6#66=eC'*eWQ
%7.qOE)9Pr(M`,S892Wo'd)qi/Q?Y!/'69i;1K)!,4H-h\e?KabV&DYSL'>iIm*2]ffr2OJ3lGkCV!s)\eTR+e8i2i)_gC3h8@g7W
%6de]r2+^mBGa>^AC;X'"M9.gOP*YKD3D#Y]\jjp?+_fKEgeO$pLLM@n,gB7_V)oqCqo`-jD'(eah0,hddf$Ut8@n2<LSPGP>pXfZ
%oL\R38KZZf8c$eZ<ROT#SgBAem4RXk/>\Q+iOQHhRR@*\d^ZS8P+Gf8B1_^E7FH="3D')"KUS]tXf=th[&5cQ+.HW$F=4&g7'DdA
%[Jh?6VTTH@2iZE7>rCYFd`Z6c`j;J-9k@W@5uV1q2cV5=%,YhSO;rjQ0Zgp#K#WjXT'QV4*iFCJFR1Pk8[f`(OEB6T%S?C6g*,^h
%o,WuX,^#C9?0U*<r-.&\^!!edZokm/)WY9_MS%SV/<ge]'EI8j!B/P.LbVEQ]:lMiJ?EGZ#o[nM/^UT6<D6JD:RgZ^jiR`KkVTtX
%+O'G3L'HbQ[T*^/WcA7Wj?W;.Q,+%ha?E=hgZ7jC:nJdo$$?qk:DjH"[fjMN/L[g*\X&"SXUS7;`)JKaAa=lh`*3DE8mm5.G-qtp
%[(9!>RKc"?>]W21)\St3"[L5]NjeO979^e[<F8N&5!X0aL)^O$PdYG/D8Y'VVqp@!N49-&%06nfXTqhNAat+=RT6*C0\P(^jEg(C
%q%ZT(\m9**[_+J@CeS;kA;<<9>g?<aRj'I+kH)m)>UW-f`0<'Rm3#th\!]n>!]`cPC8Khm$r8@U0UbMFr3rW#eL/+[\VD\WOUW7l
%1J=s:<Ausaj#+atgoChN>!0b1]fUGRFD7Rn-o*At7J[HDl0q&g-l$SSN?&Q_q_p=Ugg'^c,9e:.qRlMbWOV8AHiOp6>o?I=Cd=5+
%I`5UKU6S#MVK:Tg9H-(D(_Fst5nPBHRu7J^V)mb&5oJcLp+4Hf+?:)2pk$3,LenH1"Wb2[EL<agkgA4,II3LO?::(j)RS-@WJ*3u
%]lJ349<"A)d'4?LZlCCN&+gROdXtMu[aOaST3W`>M8H=pDg8t)(^J@Wfc1V=-a+[MfabAZO!^-nN#K31)h./Tq#o8DmI6uh?N"Gn
%fnoC1Xm\2@_&[4h%7^q><7djh:\m5"fHV*pcOXnj3=%GR`GLfKm3o0#($O1?UfD*F_j>-aVG-f]p.W@)optoJs-u%tC8,a7HA-m;
%6B>KG^ZNYi[&1?ECMr7A]D@4MJ^6)u(<)5FK*&^m;a+QuO6`NEgbt"ZPIc",<//j<f%5"NfR;!X#psK"ka^0.Ma-dWVl68,5$Wp$
%gm'F<G-.:t_\sB2Zir!j+B&8]!6k1]2fjCaBVMGA$Xt2+/5aVZEMk0qf<3t.eW="TZl:"*TNIfj,J)),)-,LS"/JS[l6qF"K)pD+
%@jft.5H@oLZkZ#'[3CWjS&is5PM'5PS'^6HHQNDjf]OCFM9:[5_AXdhjU=Sn3cR=\XhU)ac<l3bM2URPotZC<PZea[E13lWa<01a
%s#k\?->o$G%MCS>oq:G**!uJRbdU$k0.-Y2]&LZ0_[C8a5AW^naiZ.A!Z.a]6\kMs3&kQCV('U$GY=LKc00j4C"5cn4\Sg\-*g*H
%eiLFb0FVDNUHIZ/P.fA//6bQ\Wb+1if!4lBE(C,uXrVS=XWHg)Q3c/a;dA[*D[DE`TSffV"nbcRjubDuAk.I%OK-*-+GWBkLk8u.
%7THJn.Oq#[jL@rnF=p'Vq=G=N23)-W\"ol+OP_g,f3tGo[m=19_=INkW_ds.W:%C3ZtN@RbE9Q)Y&;QKq*u!Y]>_@&HCc>CJp;6G
%"gM5E/_3=](B3aX`F"ghQK0okSd4Op#iqo.`AaLUi;0,l7ZJ8GO@2o03<XXp0g+s!.iPPf9p@Rn5S7jpjEf(&#\H]"P1e=K:NXmO
%>?'F]_E!Ye,CU_),!L1P@9k\]qt<1'3B8$"YNMW*96&EaI4^>6$8@f6-:(+2?6bP@`qfeJm&[mi),36]],I..:E\6p<<h=?1$Gf+
%P&d.JUcI-to"A*A%i&*;pJ%7%9<&#&/EM;[m=Jq19i`/T]5Ch%:?j%CeJ1Xs9%P=8:1kSKK=XX?KB)1J%7MEgdV=XM=:(=A=+'eM
%YL0nTWg6nn<@KCbK'Wj=![.]g%;3;(.B$F90TkM`&S/-P0b(dWR!m-tjho%Y<N[I_Nk*6!&-=A=;3.E-+`YE\I/X0_c)ShT[`07$
%)R[dHCkUFShkc-I02!FlKQaHmJjP9t+FJ%RFV&*R?%UFHLNu/3`(F0CiS"BBJ$1`1%cfeHfVuc;l:qObCqfVO*;rZ&[N9GgjgNoM
%3iV'Mi1g!JH227=R6\JFn)52nq3@>,'PtRSmU;#==Z]l5KVJg-_en[h31IS":45:CFBJA-m"Y'9(M'J6GIQ].LL[(Y3)-S+0]IW0
%Bm+kGTub%^%lU_+J70#*kb6gn#]Lt0!G;%Sb1p']BU')5b:YNqhRp'q.g_e:giB>c5Nm$7@T$mAP\5-E-\]ERdWL``..BsI:.lqs
%^j^fnMM`>fGW4YbOmLpf["q=mii]H<J#f?:Q2DMY);)"0UlNBX,gJ3\HK9ra$O05D/j\kaR:,*@$X2$[#+UmIHXu/m!gf+)$st"5
%3TS!.XLJZbJPMKb;&J%!B/"jE-45>d\b%kBW*8a-aBO<^b<3Hu3]'0tXe%KjQi"K`R'VfQAc#+.4/[nIk6'W]d%`4@hOa;H.V-]&
%&QM&nmsWq8N]ICqG]6*N`;=/-WFN5!jG/!qOdK'f<1%'#<O@dZX"EluA6!m1'?+X^#d1Q@=01@e9DkS#6F'UMqie&*:NX#tIMHi)
%$Gn"2HLeapWI\2O=4ej2pZO!.;Z8R$i5Q\Zj@&(X*aB*5B$1<V^IghEC(lPPLJaNR5.#A-,t?b!IES)'4pLDV%b_FS\g__1?,3K&
%UmSW9(SR_li3;\je_$hF2#*BS.Te'./"/Cs:@HFWRE.':*uA<s-e9,7XP?+?f0Pe0.hZet/;plK3n_!*rfhKJ><7n,6)q0aLpkK?
%.r,]9s'lU@9qr6ffF'#Z/64rIE5H!q4cse_q+q9(':d!ScemdbKS_]iVkPhr%e$-pHljR/E)[CMq'WoA4Q7k-bLD)?'d?aWqYbE@
%A-M+!l2/nuhgt=7\'/(`EuP8R@1_@]fq_V-_lUVF+Il-NqRlOpkehP7<eu*a\G*K4EW5EVs7:.NTE"AH?X@(In=0IUq8Y/gnB:!E
%q<?'UJ,NG5rr2NhrpoXUkFY>7q=6bn5J@!ibEq,diHN%aH27D's6fo;d&8hsc#<U\5Q-APri?&($ZVSU~>
%AI9_PrivateDataEnd
